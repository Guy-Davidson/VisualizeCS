{"version":3,"sources":["Components/Quiz/Test.jsx","Components/TopBar/TopBarItem.jsx","Components/TopBar/TopBarData.jsx","Components/TopBar.jsx","Components/Sorting/SortingUtilities.jsx","Components/Sorting/Bar.jsx","Components/Sorting/Sorter.jsx","Components/PathFinding/Cell.jsx","Components/PathFinding/Finder.jsx","Components/Quiz/Hint.jsx","Components/Quiz/Solution.jsx","Components/Quiz/Question.jsx","Components/Quiz/CodeEditorHeader.jsx","Components/Quiz/Tester.jsx","Components/Quiz/CodeEditor.jsx","Components/Quiz/QuestionSideBarItem.jsx","Components/Quiz/QuizData.jsx","Components/Quiz/Quizer.jsx","Components/HomePage.jsx","Components/Console.jsx","App.jsx","index.js"],"names":["Test","props","userInput","input","test","output","useState","isLoading","setIsLoading","isCorrect","setIsCorrect","isWrong","setIsWrong","useEffect","userResult","eval","error","setGotError","arrayEquals","a","b","Array","isArray","length","every","val","index","renderLoader","setTimeout","className","type","color","height","width","testNumber","renderCorrect","size","renderWrong","TopBarItem","item","isActive","setIsActive","url","useLocation","pathname","split","includes","key","style","textDecoration","to","link","icon","name","data","TopBar","items","setItems","map","arrayBarColor","barVal","Bar","isHighlighted","backgroundColor","Sorter","setLength","speed","setSpeed","sortingAlgo","setSortingAlgo","bars","setBars","isSorting","setIsSorting","isSorted","setIsSorted","initBars","currentBars","r","Math","floor","random","i","push","sleep","ms","Promise","resolve","bubbleSort","sorted","sortingBars","j","temp","stateBars","mergeSort","len","leftStart","left","right","min","leftLimit","rightLimit","val1","val2","splice","quickSort","stack","end","pop","start","pivotVal","pivotKey","highlightedBar","pivotIndex","unHighlightedBar","onClick","Slider","onChange","newSpeed","margin","max","defaultValue","disabled","vertical","newLength","Cell","classes","setClasses","currentClasses","up","down","isFinishPoint","isMarked","findingAlgo","path","parent","join","Finder","setFindingAlgo","maze","setMaze","isFinding","setIsFinding","found","setFound","initMaze","currentMaze","k","adjList","cells","from","_","components","v","randCol","r1","r2","cell1","cell2","cell1Idx","cell2Idx","findCell1","findCell2","newCell1","concat","newCell2","randomFinish","randomFinishIdx","newFinishCell","find","vertex","findingMaze","shift","vIdx","next","pathIdx","pathCell","stateMaze","markedCell","forEach","u","uIdx","childCell","gridTemplateRows","gridTemplateColumns","Hint","showHint","setShowHint","hintName","hintText","Solution","showSolution","setShowSolution","isLocked","setIsLocked","solutionIdx","price","handleUnlockClick","id","solutionText","Question","question","isStared","setIsStared","isCompleted","setIsCompleted","mode","setMode","maxEXP","exp","setEXP","solutionLockList","setSolutionLockList","initSolutionLockList","solutions","solution","_id","newsolutionLockList","renderQuestion","difficulty","elm","idx","category","whiteSpace","successfulSubmission","title","Object","keys","handleRunClick","description","inputCode","outputCode","hints","hint","hintIdx","text","toString","CodeEditorHeader","version","setVersion","showUndo","setShowUndo","handleVersionClick","handleResetClick","Tester","gotError","tests","CodeEditor","version1Code","setVersion1Code","version2Code","setVersion2Code","version3Code","setVersion3Code","isEvaluating","setIsEvaluating","setUserInput","aceEditorRef","useRef","current","editor","setValue","solutionDefault","newValue","renderEditor","editorInitText","ref","value","theme","editorProps","$blockScrolling","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","number","QuestionSideBarItem","db","Quizer","activeQuestion","setActiveQuestion","questionsList","setQuestionList","getQuestionsList","urlActiveQuestion","newactiveQuestion","q","HomePage","Console","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"u/CAMMA,KAAO,SAAPA,KAAQC,OACV,IAAMC,UAAYD,MAAMC,UAClBC,MAAQF,MAAMG,KAAKD,MACnBE,OAASJ,MAAMG,KAAKC,OAE1B,UAAkCC,qDAAS,GAA3C,yLAAOC,UAAP,cAAkBC,aAAlB,cACA,WAAkCF,qDAAS,GAA3C,0LAAOG,UAAP,cAAkBC,aAAlB,cACA,WAA8BJ,qDAAS,GAAvC,0LAAOK,QAAP,cAAgBC,WAAhB,cAEAC,sDAAW,WACP,IAAIC,WAAa,KACjB,IACIA,WAAaC,KAAKb,UAAYC,OAC9B,MAAOa,OACPf,MAAMgB,aAAY,GAGtBC,YAAYJ,WAAYT,QAAUK,cAAa,GAAQE,YAAW,KACnE,IAEH,IAAMM,YAAc,SAACC,EAAGC,GACpB,OAAOC,MAAMC,QAAQH,IACnBE,MAAMC,QAAQF,IACdD,EAAEI,SAAWH,EAAEG,QACfJ,EAAEK,OAAM,SAACC,EAAKC,GAAN,OAAgBD,IAAQL,EAAEM,OAGlCC,aAAe,WAKjB,OAJAC,YAAY,WACRpB,cAAa,KACd,KAGC,mEAAKqB,UAAU,SAAf,UACI,2DAAC,4DAAD,CACIC,KAAK,WACLC,MAAM,UACNC,OAAQ,GACRC,MAAO,KALf,eAOahC,MAAMiC,gBAKrBC,cAAgB,WAClB,OACI,mEAAKN,UAAU,aAAf,UACI,2DAAC,8CAAD,CACIA,UAAU,cACVO,KAAI,WAER,mEAAMP,UAAU,aAAhB,uBAKNQ,YAAc,WAChB,OACI,mEAAKR,UAAU,aAAf,UACI,2DAAC,8CAAD,CACIA,UAAU,YACVO,KAAI,SACR,mEAAMP,UAAU,aAAhB,wBAKZ,OACI,mEAAKA,UAAU,OAAf,UACKtB,WAAaoB,gBACZpB,WAAaE,WAAa0B,iBAC1B5B,WAAaI,SAAW0B,kBAKvBrC,4B,6hBCpDAsC,EA3BI,SAACrC,GAChB,IAAQsC,EAAStC,EAATsC,KACR,EAAgCjC,oBAAS,GAAzC,mBAAOkC,EAAP,KAAiBC,EAAjB,KACIC,EAAMC,cAOV,OALA9B,qBAAW,WACN6B,EAAIE,SAAUC,MAAM,KAAKC,SAAzB,GAAD,OAAsCP,EAAKQ,MAASN,GAAY,GAAQA,GAAY,KAErF,CAACC,EAAKH,EAAKQ,MAGV,eAAC,IAAD,CACEC,MAAO,CAAEC,eAAgB,QACzBpB,UAAWW,EAAW,oBAAsB,aAC5CU,GAAI,CACFN,SAAS,IAAD,OAAML,EAAKY,OAJvB,UAMI,qBAAKtB,UAAU,OAAf,SACKU,EAAKa,OAEV,qBAAKvB,UAAU,OAAf,SACKU,EAAKc,W,2BCpBTC,EAAO,CAChB,CACID,KAAM,UACND,KAAM,cAAC,IAAD,IACND,KAAM,UACNJ,IAAK,WAET,CACIM,KAAM,eACND,KAAM,cAAC,IAAD,IACND,KAAM,cACNJ,IAAK,eAET,CACIM,KAAM,OACND,KAAM,cAAC,IAAD,CAAkChB,KAAM,WAC9Ce,KAAM,kBACNJ,IAAK,S,iBCgBEQ,EA7BA,WACf,MAA0BjD,mBAAS,MAAnC,mBAAOkD,EAAP,KAAcC,EAAd,KAMI,OAJA5C,qBAAW,WACP4C,EAASH,EAAKI,KAAI,SAAAnB,GAAI,OAAI,cAAC,EAAD,CAAYA,KAAMA,GAAWA,EAAKQ,WAC7D,IAGC,sBAAKlB,UAAU,SAAf,UACI,qBAAKA,UAAU,eAAf,SACS2B,GAASA,IAElB,sBAAK3B,UAAU,eAAf,UACI,cAAC,IAAD,CACImB,MAAO,CAAEC,eAAgB,QACzBpB,UAAU,OACVqB,GAAI,CACAN,SAAS,KAJjB,SAMI,qBAAKf,UAAU,YAAf,SACK,cAAC,IAAD,QAGT,cAAC,IAAD,CAAWA,UAAU,gB,mFChCxB8B,G,OAAgB,SAACC,GAC1B,OAAIA,EAAS,GACJ,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UACEA,EAAS,GACX,UAEA,YCDEC,EAfH,SAAC5D,GACT,IAAQ2D,EAAW3D,EAAX2D,OACAE,EAAkB7D,EAAlB6D,cAER,OACI,qBAAKjC,UAAU,MACXmB,MAAO,CACHe,gBAAiBD,EAAgB,UAAYH,EAAcC,GAC3D3B,MAAM,OACND,OAAO,GAAD,OAAK4B,EAAL,SC8RPI,EAxRA,WACX,MAA4B1D,mBAHb,KAGf,mBAAOiB,EAAP,KAAe0C,EAAf,KACA,EAA0B3D,mBAAS,MAAnC,mBAAO4D,EAAP,KAAcC,EAAd,KACA,EAAsC7D,mBAX3B,GAWX,mBAAO8D,EAAP,KAAoBC,EAApB,KACA,EAAwB/D,mBAAS,IAAjC,mBAAOgE,EAAP,KAAaC,EAAb,KACA,EAAkCjE,oBAAS,GAA3C,mBAAOkE,EAAP,KAAkBC,EAAlB,KACA,EAAgCnE,oBAAS,GAAzC,mBAAOoE,EAAP,KAAiBC,EAAjB,KAEA9D,qBAAW,WACP+D,MACD,CAACrD,IAEJ,IAAMqD,EAAW,WAIb,IAHA,IAAIC,EAAc,GACdC,EAAIC,KAAKC,MAAMD,KAAKE,SAAW1D,GAE1B2D,EAAI,EAAIA,EAAI3D,EAAS2D,IACtBA,IAAMJ,EACND,EAAYM,KACR,cAAC,EAAD,CACIvB,OAAQmB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAEzCnB,eAAe,GADVoB,IAIbL,EAAYM,KACR,cAAC,EAAD,CACIvB,OAAQ,IAERE,eAAe,GADV,MAMrBS,EAAQM,GACRF,GAAY,IAGVS,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAI3D,WAAW2D,EAASF,OAGhDG,EAAU,uCAAG,sCAAArE,EAAA,sDACfsD,GAAa,GAETgB,GAAS,EACTC,EAJW,YAIOpB,GAEbY,EAAI,EANE,YAMEA,EAAIZ,EAAK/C,SAAWkE,EANtB,iBAOXA,GAAS,EAEAE,EAAI,EATF,YASMA,EAAIrB,EAAK/C,OAAS,GATxB,sBAUHmE,EAAYC,GAAG1F,MAAM2D,OAAS8B,EAAYC,EAAI,GAAG1F,MAAM2D,QAVpD,wBAWH6B,GAAS,EAELG,EAAOF,EAAYC,GACvBD,EAAYC,GAAKD,EAAYC,EAAI,GACjCD,EAAYC,EAAI,GAAKC,EAEjBC,EAjBD,YAiBiBH,GACpBnB,EAAQsB,GAlBL,UAmBGT,EAhEP,EAgE0BlB,GAnBtB,QAS4ByB,IAT5B,uBAM+BT,IAN/B,uBAuBfT,GAAa,GACbE,GAAY,GAxBG,4CAAH,qDA2BVmB,EAAS,uCAAG,kDAAA3E,EAAA,sDACdsD,GAAa,GAETiB,EAHU,YAGQpB,GAClByB,EAAMzB,EAAK/C,OAENa,EAAO,EANF,YAMMA,EAAO2D,GANb,iBAODC,EAAY,EAPX,YAOeA,EAAYD,GAP3B,iBASJE,EAAOD,EACPE,EAAQnB,KAAKoB,IAAIF,EAAO7D,EAAM2D,GAC9BK,EAAYF,EACZG,EAAatB,KAAKoB,IAAID,EAAQ9D,EAAM2D,GACpCb,EAAIe,EAbA,aAgBDA,EAAOG,GAAaF,EAAQG,GAhB3B,oBAiBAC,EAAOZ,EAAYO,GAAMhG,MAAM2D,OAC/B2C,EAAOb,EAAYQ,GAAOjG,MAAM2D,SAEhC0C,GAAQC,GApBR,iBAqBAN,IArBA,+BAuBAP,EAAYc,OAAOtB,EAAI,EAAGQ,EAAYc,OAAON,EAAO,GAAG,IACvDA,IACAD,IACAG,IAEIP,EA5BJ,YA4BoBH,GACpBnB,EAAQsB,GA7BR,UA8BMT,EAtGT,EAsG4BlB,GA9BzB,QAgCJgB,IAhCI,wBAOiCc,GAAa,EAAI5D,EAPlD,uBAMmBA,GAAQ,EAN3B,uBAoCdqC,GAAa,GACbE,GAAY,GArCE,4CAAH,qDAwCT8B,EAAS,uCAAG,sDAAAtF,EAAA,sDACdsD,GAAa,GAETiB,EAHU,YAGQpB,IAElBoC,EAAQ,IACNvB,KAAK,GACXuB,EAAMvB,KAAKb,EAAK/C,OAAS,GAPX,WASPmF,EAAMnF,OATC,iBAWNoF,EAAMD,EAAME,MACZC,EAAQH,EAAME,MAEdE,EAAWpB,EAAYiB,GAAK1G,MAAM2D,OAClCmD,EAAWrB,EAAYiB,GAAK1G,MAAM8C,IAElCiE,EAAiB,cAAC,EAAD,CACGpD,OAAQkD,EAERhD,eAAe,GADViD,GAG7BrB,EAAYc,OAAOG,EAAM,EAAGK,GACxBnB,EAvBM,YAuBUH,GACpBnB,EAAQsB,GAEJoB,EAAaJ,EACR3B,EAAI2B,EA3BH,aA2BU3B,EAAIyB,GA3Bd,sBA4BFjB,EAAYR,GAAGjF,MAAM2D,OAASkD,GA5B5B,wBA6BFlB,EAAOF,EAAYR,GACvBQ,EAAYR,GAAKQ,EAAYuB,GAC7BvB,EAAYuB,GAAcrB,EAC1BqB,IAEIpB,EAlCE,YAkCcH,GACpBnB,EAAQsB,GAnCF,UAoCAT,EApJH,EAoJsBlB,GApCnB,QA2BmBgB,IA3BnB,+BAwCNU,EAAOF,EAAYiB,GACvBjB,EAAYiB,GAAOjB,EAAYuB,GAC/BvB,EAAYuB,GAAcrB,EAEtBsB,EAAmB,cAAC,EAAD,CACKtD,OAAQkD,EAERhD,eAAe,GADViD,GAGjCrB,EAAYc,OAAOS,EAAa,EAAGC,GAEnCrB,EAAS,YAAOH,GAChBnB,EAAQsB,GApDE,UAqDJT,EArKC,EAqKkBlB,GArDf,QAuDN+C,EAAa,EAAIJ,IACjBH,EAAMvB,KAAK0B,GACXH,EAAMvB,KAAK8B,EAAa,IAGxBA,EAAa,EAAIN,IACjBD,EAAMvB,KAAK8B,EAAa,GACxBP,EAAMvB,KAAKwB,IA9DL,uBAkEdlC,GAAa,GACbE,GAAY,GAnEE,4CAAH,qDAgFf,OACI,sBAAK9C,UAAU,SAAf,UACI,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAMA,UAzMX,IAyMsBuC,EAAyB,2BAA6B,gBACnE+C,QAAS,kBAAM9C,EA1MxB,IAyMK,oBAIA,sBAAMxC,UA5MZ,IA4MuBuC,EAAwB,2BAA6B,gBAClE+C,QAAS,kBAAM9C,EA7MzB,IA4MM,mBAIA,sBAAMxC,UA/MZ,IA+MuBuC,EAAwB,2BAA6B,gBAClE+C,QAAS,kBAAM9C,EAhNzB,IA+MM,sBAMJ,sBAAKxC,UAAU,kBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,gBAAf,UACQ,cAACuF,EAAA,EAAD,CACIC,SAAU,SAACC,GAAD,OAAcnD,EAASmD,IACjCtE,MAAO,CACHhB,OAAQ,QACRC,MAAO,OACPsF,OAAO,QAEXpB,IAAK,EACLqB,IAAK,GACLC,aAAc,GACdC,SAAUlD,EACVmD,UAAQ,IACZ,cAAC,IAAD,CAAsBvF,KAAI,YAG9B,sBAAKP,UAAU,gBAAf,UACI,cAACuF,EAAA,EAAD,CACIC,SAAU,SAACO,GACP3D,EAtOrB,IAsO4C2D,GACvBjD,GAAY,IAEhB3B,MAAO,CACHhB,OAAQ,QACRC,MAAO,OACPsF,OAAO,QAEXpB,IAAK,EACLqB,IAAK,GACLC,aAAc,GACdC,SAAUlD,EACVmD,UAAQ,IACZ,cAAC,IAAD,CAAQvF,KAAI,eAK3BsC,EAEG,sBAAK7C,UAAU,cAAcsF,QAASvC,EAAtC,UACI,sBAAM/C,UAAW,GAAjB,SACK,aACL,cAAC,IAAD,CACIA,UAAW,GACXO,KAAI,cAKZ,sBAAKP,UAAU,cAAcsF,QAAS,WAC7B3C,IA3Qd,IA4LHJ,EACAoB,IA5LE,IA6LKpB,EACP0B,IA7LE,IA8LK1B,GACPqC,MAyEQ,UAKI,sBAAM5E,UAAW2C,EAAY,aAAe,GAA5C,SACKA,EAAY,UAAY,SAC7B,cAAC,IAAD,CACI3C,UAAW2C,EAAY,cAAgB,GACvCpC,KAAI,kBAMpB,qBAAKP,UAAU,OAAf,SACKyC,QC9OFuD,G,cAjDF,SAAC5H,GACV,MAA8BK,mBAAS,MAAvC,mBAAOwH,EAAP,KAAgBC,EAAhB,KA0CA,OAxCAlH,qBAAW,WACP,IAAImH,EAAiB,CAAC,QAEjB/H,EAAMgI,IACPD,EAAe7C,KAAK,MAEnBlF,EAAMiI,MACPF,EAAe7C,KAAK,QAEnBlF,EAAMiG,OACP8B,EAAe7C,KAAK,SAEnBlF,EAAMgG,MACP+B,EAAe7C,KAAK,QAEpBlF,EAAMkI,eACNH,EAAe7C,KAAK,UAEpBlF,EAAMmI,WAxBD,IAyBFnI,EAAMoI,YACLL,EAAe7C,KAAK,aAEpB6C,EAAe7C,KAAK,cAIxBlF,EAAMqI,OAhCD,IAiCFrI,EAAMoI,YACLL,EAAe7C,KAAK,WAEpB6C,EAAe7C,KAAK,YAI5B4C,EAAWC,KACZ,CACC/H,EAAMmI,SAAUnI,EAAMqI,KAAMrI,EAAMsI,OAAQtI,EAAMoI,YAAapI,EAAMkI,cACnElI,EAAMgI,GAAIhI,EAAMiI,KAAMjI,EAAMiG,MAAOjG,EAAMgG,OAIzC,qBAAKpE,UAAWiG,GAAWA,EAAQU,KAAK,SCkUjCC,EAnWA,WACX,MAAsCnI,mBARzB,GAQb,mBAAO+H,EAAP,KAAoBK,EAApB,KACA,EAA4BpI,mBALb,IAKf,mBAAOiB,EAAP,KAAe0C,EAAf,KACA,EAA0B3D,mBAAS,MAAnC,mBAAO4D,EAAP,KAAcC,EAAd,KACA,EAAwB7D,mBAAS,MAAjC,mBAAOqI,EAAP,KAAaC,EAAb,KACA,EAAkCtI,oBAAS,GAA3C,mBAAOuI,EAAP,KAAkBC,EAAlB,KACA,EAA0BxI,oBAAS,GAAnC,mBAAOyI,EAAP,KAAcC,EAAd,KAGAnI,qBAAW,WACPoI,MACD,CAAC1H,IAGJ,IAAM0H,EAAW,WAMb,IAJA,IAAIC,EAAc,GAGdC,EAAI,EACCjE,EAAI,EAAIA,EAAI3D,EAAS2D,IAC1B,IAAK,IAAIS,EAAI,EAAIA,EAAIpE,EAASoE,IAC1BuD,EAAY/D,KACR,cAAC,EAAD,CAEI9B,KAAM8F,EACNlB,IAAI,EACJC,MAAM,EACNhC,OAAO,EACPD,MAAM,EACNkC,eAAe,EACfiB,QAAS,IAPJD,IAUbA,IAYR,IARA,IAAIE,EAAQhI,MAAMiI,KAAK,CACnB/H,OAAO,KAAD,IAAEA,EAAU,KACjB,SAACgI,EAAG7H,GAAJ,OAAcA,EAAQ,KAEvB8H,EAAanI,MAAMiI,KAAK,CACxB/H,OAAO,KAAD,IAAEA,EAAU,KACjB,SAACgI,EAAG7H,GAAJ,OAAcA,EAAQ,MAEnB8H,EAAWhI,OAAM,SAAAiI,GAAC,OAAIA,IAAMD,EAAW,OAAK,CAIhD,IAAIE,EAAU3E,KAAKC,MAAOD,KAAKE,SAAW1D,EAAU,GAEhDoI,EAAKD,EADK3E,KAAKC,MAAOD,KAAKE,SAAW1D,GACbA,EAEzBuD,EAAIC,KAAKE,SACT2E,GAAM,EAEV,GAAID,IAAE,SAAKpI,EAAU,GAArB,CAGIqI,EADO9E,EAAI,IAAQ6E,EAAKpI,EAAL,SAAcA,EAAU,IAAOmI,EAAUnI,IAAW,EAClEoI,EAAKpI,EAELoI,EAAK,EAGd,IAAIE,EAAQR,EAAMM,EAAK,GACnBG,EAAQT,EAAMO,EAAK,GAEnBG,EAAWF,EAAQ,EACnBG,EAAWF,EAAQ,EAEnBG,EAAYT,EAAWO,GACvBG,EAAYV,EAAWQ,GAC3B,GAAIC,IAAcC,EAAW,CAEzB,IAAK,IAAIhF,EAAI,EAAGA,EAAIsE,EAAWjI,OAAQ2D,IAC/BsE,EAAWtE,KAAO+E,IAClBT,EAAWtE,GAAKgF,GAIxB,GAAIL,EAAQ,IAAMC,EAAO,CAErB,IAAIK,EAAW,cAAC,EAAD,CAEK9G,KAAM6F,EAAYa,GAAU9J,MAAMoD,KAClC+F,QAASF,EAAYa,GAAU9J,MAAMmJ,QAAQgB,OAAO,CAACN,IACrD7B,GAAIiB,EAAYa,GAAU9J,MAAMgI,GAChCC,KAAMgB,EAAYa,GAAU9J,MAAMiI,KAClChC,OAAO,EACPD,KAAMiD,EAAYa,GAAU9J,MAAMgG,KAClCkC,eAAe,GAPV0B,GAUrBQ,EAAW,cAAC,EAAD,CAEKhH,KAAM6F,EAAYc,GAAU/J,MAAMoD,KAClC+F,QAASF,EAAYc,GAAU/J,MAAMmJ,QAAQgB,OAAO,CAACP,IACrD5B,GAAIiB,EAAYc,GAAU/J,MAAMgI,GAChCC,KAAMgB,EAAYc,GAAU/J,MAAMiI,KAClChC,MAAOgD,EAAYc,GAAU/J,MAAMiG,MACnCD,MAAM,EACNkC,eAAe,GAPV2B,GAUzBZ,EAAY1C,OAAOuD,EAAU,EAAGI,GAChCjB,EAAY1C,OAAOwD,EAAU,EAAGK,QAE/B,GAAIR,EAAQtI,IAAWuI,EAAO,CAG/B,IAAIK,EAAW,cAAC,EAAD,CAEK9G,KAAM6F,EAAYa,GAAU9J,MAAMoD,KAClC+F,QAASF,EAAYa,GAAU9J,MAAMmJ,QAAQgB,OAAO,CAACN,IACrD7B,GAAIiB,EAAYa,GAAU9J,MAAMgI,GAChCC,MAAM,EACNhC,MAAOgD,EAAYa,GAAU9J,MAAMiG,MACnCD,KAAMiD,EAAYa,GAAU9J,MAAMgG,KAClCkC,eAAe,GAPV0B,GAUrBQ,EAAW,cAAC,EAAD,CAEKhH,KAAM6F,EAAYc,GAAU/J,MAAMoD,KAClC+F,QAASF,EAAYc,GAAU/J,MAAMmJ,QAAQgB,OAAO,CAACP,IACrD5B,IAAI,EACJC,KAAMgB,EAAYc,GAAU/J,MAAMiI,KAClChC,MAAOgD,EAAYc,GAAU/J,MAAMiG,MACnCD,KAAMiD,EAAYc,GAAU/J,MAAMgG,KAClCkC,eAAe,GAPV2B,GAUzBZ,EAAY1C,OAAOuD,EAAU,EAAGI,GAChCjB,EAAY1C,OAAOwD,EAAU,EAAGK,MAK5C,IAAIC,EAAevF,KAAKC,MAAOD,KAAKE,SAALF,KAAA,IAAiBxD,EAAU,IACtDgJ,EAAkBD,EAAe,EAEjCE,EAAgB,cAAC,EAAD,CAEZpB,QAASF,EAAYqB,GAAiBtK,MAAMmJ,QAC5CnB,GAAIiB,EAAYqB,GAAiBtK,MAAMgI,GACvCC,KAAMgB,EAAYqB,GAAiBtK,MAAMiI,KACzChC,MAAOgD,EAAYqB,GAAiBtK,MAAMiG,MAC1CD,KAAMiD,EAAYqB,GAAiBtK,MAAMgG,KACzCkC,eAAe,GANVmC,GAQbpB,EAAY1C,OAAO+D,EAAiB,EAAGC,GAEvC5B,EAAQM,GACRF,GAAS,IAGP5D,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAI3D,WAAW2D,EAASF,OAGhDoF,EAAI,uCAAG,WAAOC,GAAP,qBAAAvJ,EAAA,sDACT2H,GAAa,GACT6B,EAFK,YAEahC,IAClBjC,EAAQ,IACNvB,KAAKuF,GAJF,IAAAvJ,EAAA,oDAAAA,EAAA,yDAOHsI,GAAK,EAEkBA,EAjLpB,IAiLPpB,EAA+B3B,EAAME,MAAYF,EAAMkE,SAIjDD,EAFFE,EAAOpB,EAAI,GAESxJ,MAAMkI,cAbvB,iBAeGG,EAAOmB,EAfV,WAiBMnB,EAjBN,wBAqBOwC,EAAOH,EADPI,EAAUzC,EAAO,GACWrI,MAAMsI,OAElCyC,EAAW,cAAC,EAAD,CAES5B,QAASuB,EAAYI,GAAS9K,MAAMmJ,QACpCnB,GAAI0C,EAAYI,GAAS9K,MAAMgI,GAC/BC,KAAMyC,EAAYI,GAAS9K,MAAMiI,KACjChC,MAAOyE,EAAYI,GAAS9K,MAAMiG,MAClCD,KAAM0E,EAAYI,GAAS9K,MAAMgG,KACjCkC,cAAewC,EAAYI,GAAS9K,MAAMkI,cAC1CI,OAAQoC,EAAYI,GAAS9K,MAAMsI,OACnCD,MAAM,EACND,YAAaA,GATRC,GAY7BqC,EAAYnE,OAAOuE,EAAS,EAAGC,GAC3BC,EArCP,YAqCuBN,GACpB/B,EAAQqC,GAtCX,UAuCS7F,EA5MP,EA4M0BlB,GAvC5B,QAyCGoE,EAAOwC,EAzCV,8BA4CGG,EA5CH,YA4CmBN,GACpB/B,EAAQqC,GACRnC,GAAa,GACbE,GAAS,GA/CR,yCAmDA2B,EAAYE,GAAM5K,MAAMmI,SAnDxB,wBAqDG8C,EAAa,cAAC,EAAD,CAEG9C,UAAU,EACVgB,QAASuB,EAAYE,GAAM5K,MAAMmJ,QACjCnB,GAAI0C,EAAYE,GAAM5K,MAAMgI,GAC5BC,KAAMyC,EAAYE,GAAM5K,MAAMiI,KAC9BhC,MAAOyE,EAAYE,GAAM5K,MAAMiG,MAC/BD,KAAM0E,EAAYE,GAAM5K,MAAMgG,KAC9BkC,cAAewC,EAAYE,GAAM5K,MAAMkI,cACvCI,OAAQoC,EAAYE,GAAM5K,MAAMsI,OAChCF,YAAaA,GATRoB,GAYzBkB,EAAYnE,OAAOqE,EAAM,EAAGK,GACxBD,EAnEH,YAmEmBN,GACpB/B,EAAQqC,GApEP,UAqEK7F,EA1OH,EA0OsBlB,GArExB,QAuEDyG,EAAYE,GAAM5K,MAAMmJ,QAAQ+B,SAAQ,SAAAC,GACpC,IAAIC,EAAOD,EAAI,EACf,IAAKT,EAAYU,GAAMpL,MAAMmI,SAAU,CAEnC,IAAIkD,EAAY,cAAC,EAAD,CAEhBlC,QAASuB,EAAYU,GAAMpL,MAAMmJ,QACjCnB,GAAI0C,EAAYU,GAAMpL,MAAMgI,GAC5BC,KAAMyC,EAAYU,GAAMpL,MAAMiI,KAC9BhC,MAAOyE,EAAYU,GAAMpL,MAAMiG,MAC/BD,KAAM0E,EAAYU,GAAMpL,MAAMgG,KAC9BkC,cAAewC,EAAYU,GAAMpL,MAAMkI,cACvCI,OAAQkB,EACRpB,YAAaA,GARR+C,GAWLT,EAAYnE,OAAO6E,EAAM,EAAGC,GAC5B,IAAIL,EAAS,YAAON,GACpB/B,EAAQqC,GAGRvE,EAAMvB,KAAKiG,OA5FlB,sDAMF1E,EAAMnF,OANJ,0MAAH,sDAoGV,OACI,sBAAKM,UAAU,SAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAMA,UAhRT,IAgRoBwG,EAA2B,2BAA6B,gBACrElB,QAAS,kBAAMuB,EAjRtB,IAgRG,iBAIA,sBAAM7G,UAnRT,IAmRoBwG,EAA2B,2BAA6B,gBACrElB,QAAS,kBAAMuB,EApRtB,IAmRG,oBAMJ,sBAAK7G,UAAU,kBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,gBAAf,UACQ,cAACuF,EAAA,EAAD,CACIC,SAAU,SAACC,GAAD,OAAcnD,EAASmD,IACjCtE,MAAO,CACHhB,OAAQ,QACRC,MAAO,OACPsF,OAAO,QAEXpB,IAAK,EACLqB,IAAK,EACLC,aAAc,EACdC,SAAUmB,EACVlB,UAAQ,IACZ,cAAC,IAAD,CAAsBvF,KAAI,YAG9B,sBAAKP,UAAU,gBAAf,UACI,cAACuF,EAAA,EAAD,CACIC,SAAU,SAACO,GACP3D,EA3SrB,GA2S4C2D,GACvBoB,GAAS,IAEbhG,MAAO,CACHhB,OAAQ,QACRC,MAAO,OACPsF,OAAO,QAEXpB,IAAK,EACLqB,IAAK,GACLC,aAAc,GACdC,SAAUmB,EACVlB,UAAQ,IACZ,cAAC,IAAD,CAAQvF,KAAI,eAO3B2G,EAEG,sBAAKlH,UAAU,cAAcsF,QAAS8B,EAAtC,UACI,sBAAMpH,UAAW,GAAjB,SACK,aACL,cAAC,IAAD,CACIA,UAAW,GACXO,KAAI,cAKZ,sBAAKP,UAAU,cAAcsF,QAAS,WACzB0B,GAC0B4B,EAjV1C,IAiVepC,EAAgC,EAAU9G,IAFtD,UAKI,sBAAMM,UAAWgH,EAAY,aAAe,GAA5C,SACKA,EAAY,UAAY,SAC7B,cAAC,IAAD,CACIhH,UAAWgH,EAAY,cAAgB,GACvCzG,KAAI,kBAOpB,qBAAKP,UAAU,OACXmB,MAAOzB,GAAU,CACbgK,iBAAiB,UAAD,OAAYhK,EAAZ,UAChBiK,oBAAoB,UAAD,OAAYjK,EAAZ,WAH3B,SAKKoH,GAAQA,Q,wBCtVV8C,EAnBF,SAACxL,GACV,MAAgCK,oBAAS,GAAzC,mBAAOoL,EAAP,KAAiBC,EAAjB,KAEA,OACI,qBACA9J,UAAW6J,EAAW,eAAiB,OADvC,SAEI,+BACI,sBAAK7J,UAAU,YAAYsF,QAAS,kBAAMwE,GAAaD,IAAvD,UACI,+BAAOzL,EAAM2L,WACb,+BACKF,EAAW,cAAC,IAAD,CAAiBtJ,KAAK,UAAY,cAAC,IAAD,CAAmBA,KAAK,eAG9E,+BAAOsJ,EAAWzL,EAAM4L,SAAW,a,iBCmEpCC,EA/EE,SAAC7L,GACd,MAAwCK,oBAAS,GAAjD,mBAAOyL,EAAP,KAAqBC,EAArB,KACA,EAAgC1L,mBAASL,EAAMgM,UAA/C,mBAAOA,EAAP,KAAiBC,EAAjB,KA6DA,OACI,qBACArK,UAAWkK,EAAe,mBAAqB,WAD/C,SAEI,+BACI,sBAAKlK,UAAU,gBAAgBsF,QAAS,kBAAM6E,GAAiBD,IAA/D,UACI,6CAAgB9L,EAAMkM,eA9B/BF,EAEK,sBAAKpK,UAAU,cAAf,UACI,sBAAMA,UAAU,OAAhB,SACK5B,EAAMmM,QAEX,cAAC,IAAD,CAAQvK,UAAU,OAAOO,KAAK,UAC9B,+BACK2J,EAAe,cAAC,IAAD,CAAiB3J,KAAK,UAAY,cAAC,IAAD,CAAmBA,KAAK,eAMlF,gCACI,cAAC,IAAD,CAAYP,UAAU,OAAOO,KAAK,UAClC,+BACC2J,EAAe,cAAC,IAAD,CAAiB3J,KAAK,UAAY,cAAC,IAAD,CAAmBA,KAAK,kBAgB9E,sBAAMP,UAAU,OAAhB,SACKkK,EA3DVE,EAEK,sBAAKpK,UAAU,kBAAf,UACI,qDACA,sBACIA,UAAU,MACVsF,QAAS,WACLlH,EAAMoM,kBAAkBpM,EAAMqM,GAAIrM,EAAMmM,OACxCF,GAAY,IAJpB,iBAQA,sBACIrK,UAAU,KACVsF,QAAS,kBAAM6E,GAAiBD,IAFpC,mBAnBR,8BACK9L,EAAMsM,eAiEgC,a,0BC6HxCC,EA/LE,SAACvM,GACd,IAAQwM,EAAaxM,EAAbwM,SACR,EAAgCnM,oBAAS,GAAzC,mBAAOoM,EAAP,KAAiBC,EAAjB,KACA,EAAsCrM,oBAAS,GAA/C,mBAAOsM,EAAP,KAAoBC,EAApB,KACA,EAAwBvM,mBARN,GAQlB,mBAAOwM,EAAP,KAAaC,EAAb,KACA,EAAsBzM,mBAASmM,EAASO,QAAxC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAgD5M,mBAAS,IAAzD,mBAAO6M,EAAP,KAAyBC,EAAzB,KAEAvM,qBAAU,WACNwM,MACD,IAEH,IAAMA,EAAuB,WACzB,IAAIA,EAAuB,GAC3BZ,EAASa,UAAUnC,SAAQ,SAACoC,GACxBF,EAAqBE,EAASC,MAAO,KAEzCJ,EAAoBC,IAGlBhB,EAAoB,SAACC,EAAIF,GAC3B,GAAGe,EAAiBb,GAAI,CACpB,IAAImB,EAAsBN,EAC1BM,EAAoBnB,IAAM,EAC1Bc,EAAoBK,GACpBP,EAAOD,EAAMb,KA6EfsB,EAAiB,WACnB,OACI,sBAAK7L,UAAU,WAAf,UACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,wBAAf,UACI,sBAAMA,UAAU,QAAhB,yBAtEZ,8BACK,YAAIR,MAAMoL,EAASkB,aAAajK,KAAI,SAACkK,EAAIC,GACtC,OACI,cAAC,IAAD,CAEAzL,KAAK,QACLY,MAAO,CAACuE,OAAQ,cAAexF,MAAM,SAFhC0K,EAASH,GAAK,QAAUuB,WAqEjC,sBAAKhM,UAAU,sBAAf,UACI,sBAAMA,UAAU,QAAhB,uBACA,+BAAO4K,EAASqB,cAEpB,sBAAKjM,UAAU,iBAAf,UACI,sBAAMA,UAAU,QAAhB,sBACA,uBAAMmB,MAAO,CAAC+K,WAAW,UAAzB,UAAqCtB,EAASO,OAA9C,IAAsD,cAAC,IAAD,CAAShK,MAAO,CAACjB,MAAM,mBAEjF,sBAAKF,UAAU,yBAAf,UACI,sBAAMA,UAAU,QAAhB,0BACA,iCAAO4K,EAASuB,qBAAhB,aAGR,sBAAKnM,UAAU,cAAf,UACI,sBAAKA,UAAU,SAAf,UACI,sBAAMA,UAAU,QAAhB,SAAyB4K,EAASwB,QAClC,sBAAMpM,UAAU,cAChBsF,QAAS,WACL0F,GAAgBD,GAnGjB,WACnB,IAAIa,EAAsBN,EAC1Be,OAAOC,KAAKV,GAAqBtC,SAAQ,SAACpI,GAAD,OAAS0K,EAAoB1K,IAAO,KAC7EqK,EAAoBK,GAiGAW,IAHJ,SAKKxB,EAAc,cAAC,IAAD,CAAUxK,KAAK,UAAY,cAAC,IAAD,CAAUA,KAAK,aAE7D,sBAAM+E,QAAS,kBAAMwF,GAAaD,IAAW7K,UAAU,UAAvD,SACM6K,EAAW,cAAC,IAAD,CAAQtK,KAAK,UAAa,cAAC,IAAD,CAAWA,KAAK,gBAG/D,qBAAKP,UAAU,OAAf,SACI,4BACK4K,EAAS4B,mBAItB,sBAAKxM,UAAU,KAAf,UACI,sBAAKA,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAhB,0BACA,qBAAKA,UAAU,OAAf,SACK4K,EAAS6B,eAGlB,sBAAKzM,UAAU,SAAf,UACI,sBAAMA,UAAU,QAAhB,2BACA,qBAAKA,UAAU,OAAf,SACK4K,EAAS8B,mBAItB,sBAAK1M,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAhB,mBACA,qBAAKA,UAAU,OAAf,SACK4K,EAAS+B,MA5GtB,6BACC/B,EAAS+B,MAAM9K,KAAI,SAAC+K,EAAMC,GACvB,IAAM7C,EAAW4C,EAAKE,KACtB,OAAGD,IAAYjC,EAAS+B,MAAMjN,OAAS,EAE/B,cAAC,EAAD,CAEAsK,SAAUA,EACVD,SAAU,mCAFLa,EAASH,GAAK,OAASoC,GAMhC,cAAC,EAAD,CAEA7C,SAAUA,EACVD,SAAU,SAAY,EAAI8C,GAASE,YAF9BnC,EAASH,GAAK,OAASoC,QA+FU,cAgBtD,OACI,sBAAK7M,UAAU,kBAAf,UACI,sBAAKA,UAAU,UAAf,UACI,sBAAMA,UAvLA,IAuLWiL,EAAyB,iBAAmB,SACzD3F,QAAS,kBAAM4F,EAxLb,IAuLN,sBAGA,sBAAMlL,UAzLC,IAyLUiL,EAA0B,iBAAmB,SAC1D3F,QAAS,kBAAM4F,EA1LZ,IAyLP,8BA1LM,IA4KXD,EACQY,IA5KI,IA6KLZ,EA9FN,sBAAKjL,UAAU,YAAf,UACI,sBAAKA,UAAU,cAAf,UACI,wDACA,iCAAOoL,EAAP,IAAY,cAAC,IAAD,CAASjK,MAAO,CAACjB,MAAM,mBAEvC,6BACC0K,EAASa,UAAU5J,KAAI,SAAC6J,EAAUpB,GAC/B,IAAIG,EAAKiB,EAASC,IACdvB,EAAWkB,EAAiBb,GAEhC,OACI,cAAC,EAAD,CAEAA,GAAIA,EACJL,SAAUA,EACVM,aAAcgB,EAASoB,KACvBxC,YAAa,EAAIA,EACjBC,MAAOmB,EAASnB,MAChBC,kBAAmBA,GANdC,gBAkFd,MChIAuC,G,cAlDU,SAAC5O,GACtB,MAA8BK,mBAAS,GAAvC,mBAAOwO,EAAP,KAAgBC,EAAhB,KACA,EAAgCzO,oBAAS,GAAzC,mBAAO0O,EAAP,KAAiBC,EAAjB,KAEA,OACI,sBAAKpN,UAAU,qBAAf,UACI,gCACI,sBAAMA,UAAuB,IAAZiN,EAAgB,2BAA6B,mBAC1D3H,QAAS,WACL4H,EAAW,GACX9O,EAAMiP,mBAAmB,IAHjC,uBAMA,sBAAMrN,UAAuB,IAAZiN,EAAgB,2BAA6B,mBAC1D3H,QAAS,WACL4H,EAAW,GACX9O,EAAMiP,mBAAmB,IAHjC,uBAMA,sBAAMrN,UAAuB,IAAZiN,EAAgB,2BAA6B,mBAC1D3H,QAAS,WACL4H,EAAW,GACX9O,EAAMiP,mBAAmB,IAHjC,0BAOJ,sBAAKrN,UAAU,YAAf,UACKmN,EACD,sBAAKnN,UAAU,SAAf,UACI,4CACA,sBACAA,UAAU,cACVsF,QAAS,kBAAMlH,EAAMkP,oBAFrB,iBAMA,sBACAtN,UAAU,cACVsF,QAAS,kBAAM8H,GAAY,IAF3B,mBAMF,KACF,cAAC,IAAD,CAAQ9H,QAAS,kBAAM8H,GAAaD,IAAWnN,UAAU,SACzD,cAAC,IAAD,CAAQsF,QAAS,kBAAMlH,EAAMmO,kBAAkBvM,UAAU,kB,iECH1DuN,EAxCA,SAACnP,GACZ,MAAgCK,oBAAS,GAAzC,mBAAO+O,EAAP,KAAiBpO,EAAjB,KAgCA,OACI,qBAAKY,UAAU,SAAf,SACKwN,EAXD,sBAAKxN,UAAU,QAAf,UACI,cAAC,IAAD,CACIA,UAAU,YACVO,KAAI,SAHZ,0CAnBA,qBAAKP,UAAU,cAAf,SACK5B,EAAMwM,SAAS6C,MAAM5L,KAAI,SAACtD,EAAMsB,GAC7B,OACI,cAAC1B,EAAA,EAAD,CAEIE,UAAWD,EAAMC,UACjBE,KAAMA,EACN8B,WAAYR,EAAQ,EACpBT,YAAaA,GALjB,cACgBS,YC0GzB6N,EA3GI,SAACtP,GAChB,IAAQwM,EAAaxM,EAAbwM,SACR,EAA8BnM,mBAAS,GAAvC,mBAAOwO,EAAP,KAAgBC,EAAhB,KACA,EAAwCzO,mBAAS,IAAjD,mBAAOkP,EAAP,KAAqBC,EAArB,KACA,EAAwCnP,mBAAS,IAAjD,mBAAOoP,EAAP,KAAqBC,EAArB,KACA,EAAwCrP,mBAAS,IAAjD,mBAAOsP,EAAP,KAAqBC,EAArB,KACA,EAAwCvP,oBAAS,GAAjD,mBAAOwP,EAAP,KAAqBC,EAArB,KACA,EAAkCzP,mBAAS,MAA3C,mBAAOJ,EAAP,KAAkB8P,EAAlB,KAEMC,EAAeC,iBAAO,MAiB5BrP,qBAAW,WACPsO,MACD,CAAC1C,IAEJ,IAAM0C,EAAmB,WACN,IAAZL,EACCW,EAAgB,IACC,IAAZX,EACLa,EAAgB,IACC,IAAZb,GACLe,EAAgB,IAGpBI,EAAaE,QAAQC,OAAOC,SAAS5D,EAAS6D,kBAG5CjJ,EAAW,SAACkJ,GACC,IAAZzB,EACCW,EAAgBc,GACE,IAAZzB,EACNa,EAAgBY,GACE,IAAZzB,GACNe,EAAgBU,GAEpBR,GAAgB,IAGdS,EAAe,WACjB,IAAIC,EAAiBhE,EAAS6D,gBAU9B,OARe,IAAZxB,GAAiBU,EAChBiB,EAAiBjB,EACA,IAAZV,GAAiBY,EACtBe,EAAiBf,EACA,IAAZZ,GAAiBc,IACtBa,EAAiBb,GAIjB,cAAC,IAAD,CACA/N,UAAU,aACV6O,IAAKT,EACLU,MAAOF,EACP3D,KAAK,aACL8D,MAAM,WACNvJ,SAAUA,EACVhE,KAAK,cACLwN,YAAa,CAAEC,iBAAiB,GAChCC,SAAS,OACT9O,MAAM,OACND,OAAO,MACPgP,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,WAAY,CACRC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,MAMrB,OACI,sBAAK3P,UAAU,gBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAAC,EAAD,CACAuM,eApFW,WACJ,IAAZU,EACCkB,EAAaR,GACI,IAAZV,EACLkB,EAAaN,GACI,IAAZZ,GACLkB,EAAaJ,GAEjBG,GAAgB,IA6ERb,mBA1Ee,SAACuC,GACxB1C,EAAW0C,IA0EHtC,iBAAkBA,IACjB1C,GAAwB,IAAZqC,GAAiB0B,IAC7B/D,GAAwB,IAAZqC,GAAiB0B,IAC7B/D,GAAwB,IAAZqC,GAAiB0B,OAEjC/D,GAAYqD,GAAgB,cAAC,EAAD,CAAQrD,SAAUA,EAAUvM,UAAWA,QCzFjEwR,G,OAtBa,SAACzR,GACzB,MAAgCK,oBAAS,GAAzC,mBAAOkC,EAAP,KAAiBC,EAAjB,KACIC,EAAMC,cAMV,OAJA9B,qBAAW,WACP,gBAASZ,EAAMkD,QAAWT,EAAIE,SAAWH,GAAY,GAAQA,GAAY,KAE1E,CAACC,EAAKzC,EAAMkD,OAEX,cAAC,IAAD,CACIH,MAAO,CAAEC,eAAgB,QACzBpB,UAAWW,EAAW,gCAAkC,iBACxDU,GAAI,CACJN,SAAS,SAAD,OAAW3C,EAAMkD,OAJ7B,SAMI,qBAAKtB,UAAU,OAAf,SACK5B,EAAMgO,Y,QClBV0D,EAAK,CACd,CACIrF,GAAG,EACHqB,WAAW,EACXG,SAAS,UACTE,qBAAsB,KACtBC,MAAM,cACNI,YAAY,4YACZG,MAAM,CAAC,CAACG,KAAK,2CAA4C,CAACA,KAAK,4BAC/DrB,UAAU,CAAC,CAACqB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,GAAI,CAACmB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,IAC3Ec,UAAU,kBACVC,WAAW,kBACX+B,gBAAgB,sDAChBtD,OAAO,IACP7J,KAAM,aACNmM,MAAO,CAAC,CAACnP,MAAM,6BAA8BE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,2BAA4BE,OAAO,CAAC,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,yBAA0BE,OAAO,CAAC,EAAE,EAAE,IAAK,CAACF,MAAM,qBAAsBE,OAAO,CAAC,IAAK,CAACF,MAAM,2BAA4BE,OAAO,CAAC,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,uCAAwCE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAEvV,CACIiM,GAAG,EACHqB,WAAW,EACXG,SAAS,UACTE,qBAAqB,MACrBC,MAAM,aACNI,YAAY,+hBACZG,MAAM,CAAC,CAACG,KAAK,iDAAkD,CAACA,KAAK,gCACrErB,UAAU,CAAC,CAACqB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,GAAI,CAACmB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,IAC3Ec,UAAU,kBACVC,WAAW,kBACX+B,gBAAgB,qDAChBtD,OAAO,IACP7J,KAAM,YACNmM,MAAO,CAAC,CAACnP,MAAM,4BAA6BE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,0BAA2BE,OAAO,CAAC,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,wBAAyBE,OAAO,CAAC,EAAE,EAAE,IAAK,CAACF,MAAM,oBAAqBE,OAAO,CAAC,IAAK,CAACF,MAAM,0BAA2BE,OAAO,CAAC,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,sCAAuCE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,OA/BnU,GAkCViM,GAAG,EACHqB,WAAW,EACXG,SAAS,UACTE,qBAAqB,KACrBC,MAAM,aACNI,YAAY,ieACZG,MAAM,CAAC,CAACG,KAAK,mFAAoF,CAACA,KAAK,gCACvGrB,UAAU,CAAC,CAACqB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,GAAI,CAACmB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,IAC3Ec,UAAU,kCA1CA,0BA2CA,mBA3CA,2BA4CC,mBA5CD,gCA6CM,sDA7CN,uBA8CH,KA9CG,qBA+CL,aA/CK,sBAgDH,CAAC,CAACnO,MAAM,4BAA6BE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,0BAA2BE,OAAO,CAAC,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,wBAAyBE,OAAO,CAAC,EAAE,EAAE,IAAK,CAACF,MAAM,oBAAqBE,OAAO,CAAC,IAAK,CAACF,MAAM,0BAA2BE,OAAO,CAAC,EAAE,EAAE,EAAE,IAAK,CAACF,MAAM,sCAAuCE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAhDnU,GAkDd,CACIiM,GAAG,EACHqB,WAAW,EACXG,SAAS,aACTE,qBAAqB,IACrBC,MAAM,MACNI,YAAY,iWACZG,MAAM,CAAC,CAACG,KAAK,iDAAkD,CAACA,KAAK,0BACrErB,UAAU,CAAC,CAACqB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,GAAI,CAACmB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,IAC3Ec,UAAU,+DACVC,WAAW,uBACX+B,gBAAgB,+CAChBtD,OAAO,IACP7J,KAAK,MACLmM,MAAM,KAhEI,GAmEVhD,GAAG,EACHqB,WAAW,EACXG,SAAS,aACTE,qBAAqB,IACrBC,MAAM,MACNI,YAAY,ybACZG,MAAM,CAAC,CAACG,KAAK,6DAA8D,CAACA,KAAK,0BACjFrB,UAAU,CAAC,CAACqB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,GAAI,CAACmB,KAAK,QAASvC,MAAM,IAAKoB,IAAI,IAC3Ec,UAAU,kCA3EA,0BA4EA,gEA5EA,2BA6EC,wBA7ED,gCA8EM,gDA9EN,uBA+EH,KA/EG,qBAgFL,OAhFK,sBAiFJ,IAjFI,IC6DHsD,EApDA,WACX,MAA4CtR,mBAAS,MAArD,mBAAOuR,EAAP,KAAuBC,EAAvB,KACA,EAAyCxR,mBAAS,IAAlD,mBAAOyR,EAAP,KAAsBC,EAAtB,KACItP,EAAMC,cAEJsP,EAAgB,uCAAG,sBAAA9Q,EAAA,sDAErB6Q,EADsBL,GADD,2CAAH,qDAKtB9Q,qBAAW,WACPoR,MACD,IAEHpR,qBAAW,WAEP,IAAIqR,EAAoBxP,EAAIE,SAASC,MAAM,KAAKH,EAAIE,SAASC,MAAM,KAAKtB,OAAS,GAC7E4Q,EAAoBJ,EAActH,MAAK,SAAA2H,GAAC,OAAIA,EAAEjP,OAAS+O,KAC3DJ,EAAkBK,KACnB,CAACzP,EAAKqP,IAiBT,OACI,sBAAKlQ,UAAU,SAAf,UACI,qBAAKA,UAAU,cAAf,SACI,qBAAKA,UAAU,mBAAf,SAhBJ8P,EAAGjO,KAAK,SAAC0O,EAAGvE,GACR,OACI,cAAC,EAAD,CACIA,IAAKA,EAELI,MAAOmE,EAAEnE,MACT9K,KAAMiP,EAAEjP,MAFH0K,UAiBjB,sBAAKhM,UAAU,SAAf,UACKgQ,GAAkB,cAAC,EAAD,CAAUpF,SAAUoF,IACtCA,GAAkB,cAAC,EAAD,CAAYpF,SAAUoF,W,kBClC1CQ,EAjBE,WACb,OACI,sBAAKxQ,UAAU,WAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAAC,IAAD,CACIO,KAAI,QACJP,UAAU,SACd,qBAAKA,UAAU,OAAf,wCAIJ,qBAAKA,UAAU,UAAf,+BCQGyQ,EAfC,WACZ,OACI,sBAAKzQ,UAAU,UAAf,UACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOyG,KAAK,WAAWiK,OAAK,EAACC,UAAWxO,IACxC,cAAC,IAAD,CAAOsE,KAAK,eAAeiK,OAAK,EAACC,UAAW/J,IAC5C,cAAC,IAAD,CAAOH,KAAK,QAAQkK,UAAWZ,IAC/B,cAAC,IAAD,CAAOtJ,KAAK,IAAIiK,OAAK,EAACC,UAAWH,IACjC,cAAC,IAAD,CAAO/J,KAAK,eAAeiK,OAAK,EAACC,UAAWH,WCN7CI,GARH,WACV,OACE,qBAAK5Q,UAAU,MAAf,SACE,cAAC,EAAD,OCHN6Q,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.83b77efd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport '../../sass/Components/Quiz/Test.scss'\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\"; \r\nimport { FiCheckCircle, FiX } from 'react-icons/fi';\r\n\r\nconst Test = (props) => {\r\n    const userInput = props.userInput\r\n    const input = props.test.input \r\n    const output = props.test.output \r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isCorrect, setIsCorrect] = useState(false)\r\n    const [isWrong, setIsWrong] = useState(false)         \r\n\r\n    useEffect( () => {\r\n        let userResult = null\r\n        try {            \r\n            userResult = eval(userInput + input)\r\n          } catch (error) {            \r\n            props.setGotError(true)\r\n          }\r\n          \r\n        arrayEquals(userResult, output) ? setIsCorrect(true) : setIsWrong(true)\r\n    }, [])\r\n\r\n    const arrayEquals = (a, b) => {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n    const renderLoader = () => {\r\n        setTimeout( () => {\r\n            setIsLoading(false) \r\n        }, 3000)\r\n\r\n        return (\r\n            <div className='Loader'>\r\n                <Loader \r\n                    type=\"TailSpin\" \r\n                    color=\"#00BFFF\" \r\n                    height={40} \r\n                    width={40} \r\n                    />\r\n                {`test ${props.testNumber}`}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderCorrect = () => {\r\n        return (\r\n            <div className='TestResult'>\r\n                <FiCheckCircle \r\n                    className='CorrectIcon'\r\n                    size={`4.5rem`}                     \r\n                    />\r\n                <span className='ResultText'>Pass!</span>\r\n            </div>            \r\n        )\r\n    }\r\n    \r\n    const renderWrong = () => {\r\n        return (\r\n            <div className='TestResult'>\r\n                <FiX \r\n                    className='WrongIcon'\r\n                    size={`5rem`} />\r\n                <span className='ResultText'>Failed</span>\r\n            </div>            \r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='Test'>\r\n            {isLoading && renderLoader()}\r\n            {!isLoading && isCorrect && renderCorrect()}\r\n            {!isLoading && isWrong && renderWrong()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test","import React, { useEffect, useState } from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport '../../sass/Components/TopBarItem.scss'\r\n\r\nconst TopBarItem = (props) => {\r\n    const { item } = props;       \r\n    const [isActive, setIsActive] = useState(false)\r\n    let url = useLocation();\r\n\r\n    useEffect( () => {        \r\n        (url.pathname).split('/').includes(`${item.key}`) ? setIsActive(true) : setIsActive(false)\r\n\r\n    }, [url, item.key])\r\n\r\n    return (        \r\n        <Link \r\n          style={{ textDecoration: 'none' }}\r\n          className={isActive ? 'TopBarItem Active' : 'TopBarItem'}\r\n          to={{\r\n            pathname: `/${item.link}`,            \r\n                }}>       \r\n            <div className='icon'>\r\n                {item.icon}\r\n            </div>\r\n            <div className='name'>\r\n                {item.name}\r\n            </div>\r\n        </Link>        \r\n    )\r\n}\r\n\r\nexport default TopBarItem","import { ImStatsBars } from 'react-icons/im';\r\nimport { GrGraphQl } from 'react-icons/gr';\r\nimport { BsReverseLayoutTextWindowReverse } from 'react-icons/bs';\r\n\r\n\r\nexport const data = [\r\n    {\r\n        name: 'Sorting',\r\n        icon: <ImStatsBars />,\r\n        link: 'Sorting',\r\n        key: 'Sorting'\r\n    },\r\n    {\r\n        name: 'Path Finding',\r\n        icon: <GrGraphQl />,\r\n        link: 'PathFinding',\r\n        key: 'PathFinding'\r\n    },\r\n    {\r\n        name: 'Quiz',\r\n        icon: <BsReverseLayoutTextWindowReverse size={'2.7rem'} />,\r\n        link: 'Quiz/BubbleSort',\r\n        key: 'Quiz'\r\n    }\r\n]","import React, { useEffect, useState } from 'react'\r\nimport '../sass/Components/TopBar.scss'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport TopBarItem from './TopBar/TopBarItem'\r\nimport { data } from './TopBar/TopBarData'\r\nimport { AiOutlineHome, AiFillCheckCircle } from \"react-icons/ai\";\r\nimport { CgProfile } from \"react-icons/cg\";\r\n\r\nconst TopBar = () => {\r\nconst [items, setItems] = useState(null) \r\n\r\n    useEffect( () => {\r\n        setItems(data.map(item => <TopBarItem item={item} key={item.key}/>))\r\n    }, [])\r\n\r\n    return (\r\n        <div className='TopBar'>  \r\n            <div className='ItemsWrapper'>                \r\n                    {items && items}                     \r\n            </div>                      \r\n            <div className='IconsWrapper'>\r\n                <Link \r\n                    style={{ textDecoration: 'none' }}\r\n                    className='icon'\r\n                    to={{\r\n                        pathname: `/`,            \r\n                            }}>       \r\n                    <div className='icon Home'>\r\n                        {<AiOutlineHome />}\r\n                    </div>\r\n                </Link>                     \r\n                <CgProfile className='icon'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopBar\r\n","export const arrayBarColor = (barVal) => {\r\n    if (barVal < 10) {\r\n      return \"#001845\";\r\n    } else if (barVal < 20) {\r\n      return \"#2C306E\";\r\n    } else if (barVal < 30) {\r\n      return \"#12257A\";\r\n    } else if (barVal < 40) {\r\n      return \"#1A88C7\";\r\n    } else if (barVal < 50) {\r\n      return \"#4AA6CF\";\r\n    } else if (barVal < 60) {\r\n      return \"#13B9DB\";\r\n    } else if (barVal < 70) {\r\n      return \"#2ACAE6\";\r\n    } else if (barVal < 80) {\r\n      return \"#7EE5D9\";\r\n    } else if (barVal < 90) {\r\n      return \"#FFE3BC\";\r\n    } else {\r\n      return \"#E6FEFE\";\r\n    }\r\n  }","import React from 'react'\r\nimport '../../sass/Components/Sorting/Bar.scss'\r\nimport { arrayBarColor } from './SortingUtilities'\r\n\r\nconst Bar = (props) => {   \r\n    const { barVal } = props    \r\n    const { isHighlighted } = props \r\n\r\n    return (\r\n        <div className='Bar' \r\n            style={{                               \r\n                backgroundColor: isHighlighted ? '#ffdd00' : arrayBarColor(barVal), \r\n                width: `100%`,\r\n                height: `${barVal}%`\r\n                }}>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bar","import React, { useEffect, useState } from 'react'\r\nimport '../../sass/Components/Sorting/Sorter.scss'\r\nimport { Slider } from 'rsuite';\r\nimport 'rsuite/dist/styles/rsuite-default.css'\r\nimport { IoSpeedometerOutline } from 'react-icons/io5' \r\nimport { IoIosArrowForward } from 'react-icons/io'; \r\nimport { VscDebugRestart } from 'react-icons/vsc'; \r\nimport { CgSize } from 'react-icons/cg';\r\n\r\nimport Bar from './Bar'\r\n\r\nconst BUBBLE = 1;\r\nconst MERGE = 2;\r\nconst QUICK = 3;\r\n\r\n\r\nconst BASE_SPEED = 1\r\nconst MAX_LENGTH = 100\r\n\r\nconst Sorter = () => {\r\n    const [length, setLength] = useState(MAX_LENGTH) \r\n    const [speed, setSpeed] = useState(null)\r\n    const [sortingAlgo, setSortingAlgo] = useState(BUBBLE)\r\n    const [bars, setBars] = useState([])\r\n    const [isSorting, setIsSorting] = useState(false)\r\n    const [isSorted, setIsSorted] = useState(false) \r\n\r\n    useEffect( () => {\r\n        initBars()\r\n    }, [length])\r\n\r\n    const initBars = () => {\r\n        let currentBars = []\r\n        let r = Math.floor(Math.random() * length) \r\n\r\n        for (let i = 0 ; i < length ; i++) {\r\n            if (i !== r) {\r\n                currentBars.push(\r\n                    <Bar \r\n                        barVal={Math.floor(Math.random() * 99) + 1}                                    \r\n                        key={i}\r\n                        isHighlighted={false}/>\r\n                )\r\n            } else {\r\n                currentBars.push(\r\n                    <Bar \r\n                        barVal={100}                                         \r\n                        key={100}\r\n                        isHighlighted={false}/>\r\n                )\r\n            }\r\n        }\r\n\r\n        setBars(currentBars)\r\n        setIsSorted(false)\r\n    }\r\n\r\n    const sleep = (ms) =>  {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n      }\r\n\r\n    const bubbleSort = async () => {   \r\n        setIsSorting(true)          \r\n\r\n        let sorted = false       \r\n        let sortingBars = [...bars]\r\n\r\n        for (let i = 0 ; i < bars.length && !sorted ; i++) {\r\n            sorted = true  \r\n                  \r\n            for (let j = 0 ; j < bars.length - 1 ; j++) {                                \r\n                if (sortingBars[j].props.barVal > sortingBars[j + 1].props.barVal) {\r\n                    sorted = false                    \r\n\r\n                    let temp = sortingBars[j] \r\n                    sortingBars[j] = sortingBars[j + 1] \r\n                    sortingBars[j + 1] = temp \r\n\r\n                    let stateBars = [...sortingBars]\r\n                    setBars(stateBars)\r\n                    await sleep(BASE_SPEED + speed)                                        \r\n                }\r\n            }            \r\n        }\r\n        setIsSorting(false)     \r\n        setIsSorted(true)   \r\n    }\r\n\r\n    const mergeSort = async () => {\r\n        setIsSorting(true) \r\n        \r\n        let sortingBars = [...bars]   \r\n        let len = bars.length     \r\n        \r\n        for (let size = 1 ; size < len ; size *= 2) {\r\n            for (let leftStart = 0 ; leftStart < len ; leftStart += 2 * size) {\r\n        \r\n              let left = leftStart            \r\n              let right = Math.min(left + size, len)\r\n              let leftLimit = right\r\n              let rightLimit = Math.min(right + size, len);\r\n              let i = left\r\n              // merge(from, mid, to):                        \r\n        \r\n              while (left < leftLimit && right < rightLimit) {\r\n                  let val1 = sortingBars[left].props.barVal\r\n                  let val2 = sortingBars[right].props.barVal                \r\n        \r\n                  if (val1 <= val2) {                                          \r\n                      left++;\r\n                  } else {        \r\n                      sortingBars.splice(i , 0, sortingBars.splice(right, 1)[0])                    \r\n                      right++;\r\n                      left++;\r\n                      leftLimit++\r\n\r\n                      let stateBars = [...sortingBars]\r\n                      setBars(stateBars)\r\n                      await sleep(BASE_SPEED + speed) \r\n                  }\r\n                  i++;            \r\n              }\r\n            }\r\n          }\r\n        setIsSorting(false) \r\n        setIsSorted(true)   \r\n    }\r\n\r\n    const quickSort = async () => {\r\n        setIsSorting(true) \r\n        \r\n        let sortingBars = [...bars]\r\n\r\n        let stack = []\r\n        stack.push(0)\r\n        stack.push(bars.length - 1)\r\n\r\n        while (stack.length) {\r\n\r\n            let end = stack.pop()\r\n            let start = stack.pop()             \r\n\r\n            let pivotVal = sortingBars[end].props.barVal  \r\n            let pivotKey = sortingBars[end].props.key\r\n\r\n            let highlightedBar = <Bar \r\n                                    barVal={pivotVal}\r\n                                    key={pivotKey}\r\n                                    isHighlighted={true}/>\r\n\r\n            sortingBars.splice(end , 1, highlightedBar)\r\n            let stateBars = [...sortingBars]\r\n            setBars(stateBars)\r\n\r\n            let pivotIndex = start; \r\n            for (let i = start; i < end; i++) {\r\n                if (sortingBars[i].props.barVal < pivotVal) {                                                \r\n                let temp = sortingBars[i]\r\n                sortingBars[i] = sortingBars[pivotIndex]\r\n                sortingBars[pivotIndex] = temp\r\n                pivotIndex++;\r\n\r\n                let stateBars = [...sortingBars]\r\n                setBars(stateBars)\r\n                await sleep(BASE_SPEED + speed) \r\n                }\r\n            }\r\n            \r\n            let temp = sortingBars[end]\r\n            sortingBars[end] = sortingBars[pivotIndex]\r\n            sortingBars[pivotIndex] = temp  \r\n\r\n            let unHighlightedBar = <Bar \r\n                                        barVal={pivotVal}\r\n                                        key={pivotKey}\r\n                                        isHighlighted={false}/>\r\n\r\n            sortingBars.splice(pivotIndex , 1, unHighlightedBar) \r\n            \r\n            stateBars = [...sortingBars]\r\n            setBars(stateBars)\r\n            await sleep(BASE_SPEED + speed) \r\n  \r\n            if (pivotIndex - 1 > start) {                \r\n                stack.push(start)\r\n                stack.push(pivotIndex - 1)\r\n            }\r\n        \r\n            if (pivotIndex + 1 < end) {                \r\n                stack.push(pivotIndex + 1)\r\n                stack.push(end) \r\n            }\r\n        }\r\n        \r\n        setIsSorting(false) \r\n        setIsSorted(true)   \r\n    }    \r\n\r\n    const sort = () => {        \r\n        if (sortingAlgo === BUBBLE) {\r\n            bubbleSort()\r\n        } else if (sortingAlgo === MERGE) {\r\n            mergeSort()\r\n        } else if (sortingAlgo === QUICK) {\r\n            quickSort()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='Sorter'>\r\n            <div className='SideBar'>\r\n                <div className='AlgoWrapper'>\r\n                    <span className={sortingAlgo === BUBBLE ? 'ActiveAlgo SortingButton' : 'SortingButton'}\r\n                        onClick={() => setSortingAlgo(BUBBLE)}>\r\n                        Bubble\r\n                    </span>\r\n                    <span className={sortingAlgo === MERGE ? 'ActiveAlgo SortingButton' : 'SortingButton'}\r\n                        onClick={() => setSortingAlgo(MERGE)}>\r\n                        Merge\r\n                    </span>\r\n                    <span className={sortingAlgo === QUICK ? 'ActiveAlgo SortingButton' : 'SortingButton'}\r\n                        onClick={() => setSortingAlgo(QUICK)}>\r\n                        Quick\r\n                    </span>\r\n                </div>\r\n\r\n                <div className='SettingsWrapper'>\r\n                    <div className='TopSettings'>\r\n                        <div className='SliderWrapper'>\r\n                                <Slider     \r\n                                    onChange={(newSpeed) => setSpeed(newSpeed) }\r\n                                    style={{ \r\n                                        height: '20rem',\r\n                                        width: '1rem', \r\n                                        margin: `1rem`                                                               \r\n                                    }}\r\n                                    min={0}\r\n                                    max={20}\r\n                                    defaultValue={10} \r\n                                    disabled={isSorting}\r\n                                    vertical/>\r\n                                <IoSpeedometerOutline size={`3rem`}/>\r\n                            </div>\r\n\r\n                            <div className='SliderWrapper'>\r\n                                <Slider     \r\n                                    onChange={(newLength) => {\r\n                                        setLength(MAX_LENGTH - newLength)\r\n                                        setIsSorted(false)\r\n                                    }}\r\n                                    style={{ \r\n                                        height: '20rem',\r\n                                        width: '1rem', \r\n                                        margin: `1rem`                                                               \r\n                                    }}                                \r\n                                    min={0}\r\n                                    max={80}\r\n                                    defaultValue={40} \r\n                                    disabled={isSorting}\r\n                                    vertical/>\r\n                                <CgSize size={`3rem`}/>\r\n                            </div>\r\n                        </div>\r\n                \r\n\r\n                {isSorted ?\r\n\r\n                    <div className='SortWrapper' onClick={initBars}>\r\n                        <span className={''}>\r\n                            {'Generate'}</span>\r\n                        <VscDebugRestart \r\n                            className={''}\r\n                            size={`2.8rem`} />\r\n                    </div>\r\n\r\n                    : \r\n\r\n                    <div className='SortWrapper' onClick={() => {\r\n                        if (!isSorting) {\r\n                            sort()\r\n                        }                      \r\n                    }}>\r\n                        <span className={isSorting ? 'ActiveSort' : ''}>\r\n                            {isSorting ? 'Sorting' : 'Sort'}</span>\r\n                        <IoIosArrowForward \r\n                            className={isSorting ? 'ActiveArrow' : ''}\r\n                            size={`3rem`} />\r\n                    </div>\r\n\r\n                }\r\n                </div>\r\n            </div>\r\n            <div className='Port'>\r\n                {bars}                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sorter\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../../sass/Components/PathFinding/Cell.scss'\r\n\r\nconst DFS_ALGO = 1\r\nconst BFS_ALGO = 2\r\n\r\nconst Cell = (props) => {\r\n    const [classes, setClasses] = useState(null)\r\n\r\n    useEffect( () => {\r\n        let currentClasses = ['Cell']\r\n\r\n        if (!props.up) {            \r\n            currentClasses.push('Up')\r\n        }\r\n        if (!props.down) {            \r\n            currentClasses.push('Down')\r\n        }\r\n        if (!props.right) {            \r\n            currentClasses.push('Right')\r\n        }\r\n        if (!props.left) {            \r\n            currentClasses.push('Left')\r\n        }\r\n        if (props.isFinishPoint) {            \r\n            currentClasses.push('Finish')\r\n        }\r\n        if (props.isMarked) {      \r\n            if(props.findingAlgo === DFS_ALGO)  {\r\n                currentClasses.push('dfsMarked')\r\n            } else {\r\n                currentClasses.push('bfsMarked')\r\n            }\r\n            \r\n        }\r\n        if (props.path) {                        \r\n            if(props.findingAlgo === DFS_ALGO)  {\r\n                currentClasses.push('dfsPath')\r\n            } else {\r\n                currentClasses.push('bfsPath')\r\n            }\r\n        }\r\n\r\n        setClasses(currentClasses)    \r\n    }, [\r\n        props.isMarked, props.path, props.parent, props.findingAlgo, props.isFinishPoint,\r\n        props.up, props.down, props.right, props.left\r\n    ])\r\n\r\n    return (\r\n        <div className={classes && classes.join(' ')}>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cell","import React, { useEffect, useState } from 'react'\r\nimport '../../sass/Components/PathFinding/Finder.scss'\r\nimport { Slider } from 'rsuite';\r\nimport 'rsuite/dist/styles/rsuite-default.css'\r\nimport { IoSpeedometerOutline } from 'react-icons/io5' \r\nimport { IoIosArrowForward } from 'react-icons/io'; \r\nimport { VscDebugRestart } from 'react-icons/vsc'; \r\nimport { CgSize } from 'react-icons/cg';\r\nimport Cell from './Cell'\r\n\r\nconst DFS_ALGO = 1\r\nconst BFS_ALGO = 2\r\n\r\nconst BASE_SPEED = 1\r\nconst MAX_LENGTH = 35\r\n\r\n\r\nconst Finder = () => {\r\n    const [findingAlgo, setFindingAlgo] = useState(DFS_ALGO)\r\n    const [length, setLength] = useState(MAX_LENGTH)     \r\n    const [speed, setSpeed] = useState(null)    \r\n    const [maze, setMaze] = useState(null)\r\n    const [isFinding, setIsFinding] = useState(false)\r\n    const [found, setFound] = useState(false) \r\n    \r\n\r\n    useEffect( () => {\r\n        initMaze()\r\n    }, [length])\r\n\r\n\r\n    const initMaze = () => {        \r\n\r\n        let currentMaze = []\r\n        \r\n\r\n        let k = 1\r\n        for (let i = 0 ; i < length ; i++) {            \r\n            for (let j = 0 ; j < length ; j++) {\r\n                currentMaze.push (\r\n                    <Cell \r\n                        key={k}\r\n                        name={k}\r\n                        up={true}\r\n                        down={true}\r\n                        right={true}\r\n                        left={true}    \r\n                        isFinishPoint={false}                         \r\n                        adjList={[]}                     \r\n                        />                        \r\n                )\r\n                k++\r\n            }            \r\n        }           \r\n\r\n        let cells = Array.from({\r\n            length: length ** 2\r\n          }, (_, index) => index + 1);\r\n\r\n        let components = Array.from({\r\n            length: length ** 2\r\n          }, (_, index) => index + 1);         \r\n          \r\n        while (!components.every(v => v === components[0])) {        \r\n\r\n            \r\n            \r\n            let randCol = Math.floor((Math.random() * length) + 1);\r\n            let randRow = Math.floor((Math.random() * length));\r\n            let r1 = randCol + randRow * length;\r\n\r\n            let r = Math.random()\r\n            let r2 = -1\r\n\r\n            if (r1 === length ** 2) {\r\n                continue;\r\n            } else if (r < 0.5 && (r1 + length < length ** 2) || (randCol % length === 0)) {\r\n                r2 = r1 + length;\r\n            } else {\r\n                r2 = r1 + 1;\r\n            }\r\n\r\n            let cell1 = cells[r1 - 1] \r\n            let cell2 = cells[r2 - 1] \r\n\r\n            let cell1Idx = cell1 - 1\r\n            let cell2Idx = cell2 - 1\r\n\r\n            let findCell1 = components[cell1Idx]\r\n            let findCell2 = components[cell2Idx]\r\n            if (findCell1 !== findCell2) {                \r\n\r\n                for (let i = 0; i < components.length; i++) {\r\n                    if (components[i] === findCell1) {\r\n                        components[i] = findCell2;\r\n                    }\r\n                }                         \r\n\r\n                if (cell1 + 1 === cell2) {                    \r\n                    \r\n                    let newCell1 = <Cell \r\n                                        key={cell1}\r\n                                        name={currentMaze[cell1Idx].props.name}\r\n                                        adjList={currentMaze[cell1Idx].props.adjList.concat([cell2])}\r\n                                        up={currentMaze[cell1Idx].props.up}\r\n                                        down={currentMaze[cell1Idx].props.down}\r\n                                        right={false}\r\n                                        left={currentMaze[cell1Idx].props.left}    \r\n                                        isFinishPoint={false}\r\n                                        />\r\n\r\n                    let newCell2 = <Cell \r\n                                        key={cell2}\r\n                                        name={currentMaze[cell2Idx].props.name}\r\n                                        adjList={currentMaze[cell2Idx].props.adjList.concat([cell1])}\r\n                                        up={currentMaze[cell2Idx].props.up}\r\n                                        down={currentMaze[cell2Idx].props.down}\r\n                                        right={currentMaze[cell2Idx].props.right}\r\n                                        left={false}    \r\n                                        isFinishPoint={false}\r\n                                        />\r\n\r\n                    currentMaze.splice(cell1Idx, 1, newCell1)    \r\n                    currentMaze.splice(cell2Idx, 1, newCell2)   \r\n                }\r\n                else if (cell1 + length === cell2) {                    \r\n\r\n\r\n                    let newCell1 = <Cell \r\n                                        key={cell1}\r\n                                        name={currentMaze[cell1Idx].props.name}\r\n                                        adjList={currentMaze[cell1Idx].props.adjList.concat([cell2])}\r\n                                        up={currentMaze[cell1Idx].props.up}\r\n                                        down={false}\r\n                                        right={currentMaze[cell1Idx].props.right}\r\n                                        left={currentMaze[cell1Idx].props.left}    \r\n                                        isFinishPoint={false}\r\n                                        />\r\n\r\n                    let newCell2 = <Cell \r\n                                        key={cell2}\r\n                                        name={currentMaze[cell2Idx].props.name}\r\n                                        adjList={currentMaze[cell2Idx].props.adjList.concat([cell1])}\r\n                                        up={false}\r\n                                        down={currentMaze[cell2Idx].props.down}\r\n                                        right={currentMaze[cell2Idx].props.right}\r\n                                        left={currentMaze[cell2Idx].props.left}    \r\n                                        isFinishPoint={false}\r\n                                        />\r\n\r\n                    currentMaze.splice(cell1Idx, 1, newCell1)    \r\n                    currentMaze.splice(cell2Idx, 1, newCell2)\r\n                }\r\n              }\r\n        }\r\n\r\n        let randomFinish = Math.floor((Math.random() * (length ** 2)) ) \r\n        let randomFinishIdx = randomFinish - 1        \r\n        \r\n        let newFinishCell = <Cell \r\n                key={randomFinish}                \r\n                adjList={currentMaze[randomFinishIdx].props.adjList}\r\n                up={currentMaze[randomFinishIdx].props.up}\r\n                down={currentMaze[randomFinishIdx].props.down}\r\n                right={currentMaze[randomFinishIdx].props.right}\r\n                left={currentMaze[randomFinishIdx].props.left}                   \r\n                isFinishPoint={true}/>\r\n\r\n        currentMaze.splice(randomFinishIdx, 1, newFinishCell) \r\n\r\n        setMaze(currentMaze)\r\n        setFound(false)\r\n    }\r\n\r\n    const sleep = (ms) =>  {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n      }\r\n\r\n    const find = async (vertex) => {\r\n        setIsFinding(true)\r\n        let findingMaze = [...maze]\r\n        let stack = [];        \r\n        stack.push(vertex);\r\n\r\n        while (stack.length) {\r\n          let v = -1\r\n\r\n          findingAlgo === DFS_ALGO ? v = stack.pop() : v = stack.shift()\r\n\r\n          let vIdx = v - 1\r\n\r\n            if (findingMaze[vIdx].props.isFinishPoint) {                \r\n\r\n                let path = v;\r\n      \r\n                while (path) {\r\n                    \r\n        \r\n                    let pathIdx = path - 1\r\n                    let next = findingMaze[pathIdx].props.parent\r\n\r\n                    let pathCell = <Cell                                     \r\n                                            key={path}                                                            \r\n                                            adjList={findingMaze[pathIdx].props.adjList}\r\n                                            up={findingMaze[pathIdx].props.up}\r\n                                            down={findingMaze[pathIdx].props.down}\r\n                                            right={findingMaze[pathIdx].props.right}\r\n                                            left={findingMaze[pathIdx].props.left}    \r\n                                            isFinishPoint={findingMaze[pathIdx].props.isFinishPoint} \r\n                                            parent={findingMaze[pathIdx].props.parent}                                   \r\n                                            path={true}\r\n                                            findingAlgo={findingAlgo}  \r\n                                            />\r\n        \r\n                    findingMaze.splice(pathIdx, 1, pathCell)\r\n                    let stateMaze = [...findingMaze]\r\n                    setMaze(stateMaze)\r\n                    await sleep(BASE_SPEED + speed);\r\n        \r\n                    path = next\r\n                }\r\n                 \r\n                let stateMaze = [...findingMaze]\r\n                setMaze(stateMaze) \r\n                setIsFinding(false)   \r\n                setFound(true)                     \r\n                return;\r\n            }\r\n\r\n            if (!findingMaze[vIdx].props.isMarked) {                \r\n\r\n                let markedCell = <Cell                                     \r\n                                    key={v}                                    \r\n                                    isMarked={true} \r\n                                    adjList={findingMaze[vIdx].props.adjList}\r\n                                    up={findingMaze[vIdx].props.up}\r\n                                    down={findingMaze[vIdx].props.down}\r\n                                    right={findingMaze[vIdx].props.right}\r\n                                    left={findingMaze[vIdx].props.left}    \r\n                                    isFinishPoint={findingMaze[vIdx].props.isFinishPoint} \r\n                                    parent={findingMaze[vIdx].props.parent}     \r\n                                    findingAlgo={findingAlgo}                                \r\n                                    />\r\n\r\n                findingMaze.splice(vIdx, 1, markedCell)\r\n                let stateMaze = [...findingMaze]\r\n                setMaze(stateMaze)\r\n                await sleep(BASE_SPEED + speed);\r\n                \r\n                findingMaze[vIdx].props.adjList.forEach(u => {\r\n                    let uIdx = u - 1\r\n                    if (!findingMaze[uIdx].props.isMarked) {\r\n\r\n                        let childCell = <Cell                                     \r\n                        key={u}                                                            \r\n                        adjList={findingMaze[uIdx].props.adjList}\r\n                        up={findingMaze[uIdx].props.up}\r\n                        down={findingMaze[uIdx].props.down}\r\n                        right={findingMaze[uIdx].props.right}\r\n                        left={findingMaze[uIdx].props.left}    \r\n                        isFinishPoint={findingMaze[uIdx].props.isFinishPoint} \r\n                        parent={v}                                   \r\n                        findingAlgo={findingAlgo}  \r\n                        />\r\n\r\n                        findingMaze.splice(uIdx, 1, childCell)\r\n                        let stateMaze = [...findingMaze]\r\n                        setMaze(stateMaze)\r\n                        \r\n\r\n                        stack.push(u);\r\n                    }\r\n                });\r\n            }\r\n            \r\n        }        \r\n    }\r\n\r\n    return (\r\n        <div className='Finder'>\r\n            <div className='MazeSideBar'>\r\n                <div className='AlgoWrapper'>\r\n                    <span className={findingAlgo === DFS_ALGO ? 'ActiveAlgo FindingButton' : 'FindingButton'}\r\n                        onClick={() => setFindingAlgo(DFS_ALGO)}>\r\n                        DFS\r\n                    </span>\r\n                    <span className={findingAlgo === BFS_ALGO ? 'ActiveAlgo FindingButton' : 'FindingButton'}\r\n                        onClick={() => setFindingAlgo(BFS_ALGO)}>\r\n                        BFS\r\n                    </span>\r\n                </div>\r\n\r\n                <div className='SettingsWrapper'>                    \r\n                    <div className='TopSettings'>\r\n                        <div className='SliderWrapper'>\r\n                                <Slider     \r\n                                    onChange={(newSpeed) => setSpeed(newSpeed) }\r\n                                    style={{ \r\n                                        height: '20rem',\r\n                                        width: '1rem', \r\n                                        margin: `1rem`                                                               \r\n                                    }}\r\n                                    min={1}\r\n                                    max={9}\r\n                                    defaultValue={5} \r\n                                    disabled={isFinding}\r\n                                    vertical/>\r\n                                <IoSpeedometerOutline size={`3rem`}/>\r\n                            </div>\r\n\r\n                            <div className='SliderWrapper'>\r\n                                <Slider                                         \r\n                                    onChange={(newLength) => {\r\n                                        setLength(MAX_LENGTH - newLength)\r\n                                        setFound(false)                                        \r\n                                    }}\r\n                                    style={{ \r\n                                        height: '20rem',\r\n                                        width: '1rem', \r\n                                        margin: `1rem`                                                               \r\n                                    }}                                \r\n                                    min={0}\r\n                                    max={20}\r\n                                    defaultValue={10} \r\n                                    disabled={isFinding}\r\n                                    vertical/>\r\n                                <CgSize size={`3rem`}/>\r\n                            </div>\r\n                        </div>\r\n                \r\n\r\n                \r\n\r\n                {found ?\r\n\r\n                    <div className='FindWrapper' onClick={initMaze}>\r\n                        <span className={''}>\r\n                            {'Generate'}</span>\r\n                        <VscDebugRestart \r\n                            className={''}\r\n                            size={`2.8rem`} />\r\n                    </div>\r\n\r\n                    : \r\n\r\n                    <div className='FindWrapper' onClick={() => {\r\n                            if (!isFinding) {\r\n                                findingAlgo === DFS_ALGO ? find(1) : find(length)\r\n                            }                      \r\n                        }}>\r\n                        <span className={isFinding ? 'ActiveFind' : ''}>\r\n                            {isFinding ? 'Finding' : 'Find'}</span>\r\n                        <IoIosArrowForward \r\n                            className={isFinding ? 'ActiveArrow' : ''}\r\n                            size={`3rem`} />\r\n                    </div>\r\n\r\n                }\r\n                </div>\r\n            </div>\r\n\r\n            <div className='Maze'\r\n                style={length && {\r\n                    gridTemplateRows: `repeat(${length}, 1fr)`,\r\n                    gridTemplateColumns: `repeat(${length}, 1fr)`,\r\n                }}>\r\n                {maze && maze}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Finder","import React, { useState } from 'react';\r\n\r\nimport '../../sass/Components/Quiz/Hint.scss'\r\nimport { TiArrowSortedDown, TiArrowSortedUp } from \"react-icons/ti\";\r\n\r\nconst Hint = (props) => {\r\n    const [showHint, setShowHint] = useState(false);\r\n\r\n    return (\r\n        <div\r\n        className={showHint ? 'hint clicked' : 'hint'} >\r\n            <li>\r\n                <div className='hintTitle' onClick={() => setShowHint(!showHint)}>\r\n                    <span>{props.hintName}</span>\r\n                    <span> \r\n                        {showHint ? <TiArrowSortedUp size='1.5em'/> : <TiArrowSortedDown size='1.5em'/>}\r\n                    </span>\r\n                </div>                \r\n                <span>{showHint ? props.hintText : null}</span>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hint","import React, { useState } from 'react';\r\nimport '../../sass/Components/Quiz/Solution.scss'\r\nimport { TiArrowSortedDown, TiArrowSortedUp } from \"react-icons/ti\";\r\nimport { FaLock, FaLockOpen } from \"react-icons/fa\";\r\n\r\n\r\nconst Solution = (props) => {\r\n    const [showSolution, setShowSolution] = useState(false);\r\n    const [isLocked, setIsLocked] = useState(props.isLocked);\r\n\r\n    const solutionCodeBlock = () => {        \r\n        return (\r\n            <div>\r\n                {props.solutionText}\r\n            </div>            \r\n        )\r\n      }\r\n\r\n    const solutionByMode = () => {\r\n        if(isLocked) {\r\n            return(\r\n                <div className='unlock-solution'>\r\n                    <span>Unlock Solution? </span>\r\n                    <span \r\n                        className='yes'\r\n                        onClick={() => {\r\n                            props.handleUnlockClick(props.id, props.price)\r\n                            setIsLocked(false);\r\n                        }}>\r\n                        Yes\r\n                    </span>\r\n                    <span \r\n                        className='no'\r\n                        onClick={() => setShowSolution(!showSolution)}>\r\n                        No\r\n                    </span>\r\n                </div>\r\n            )\r\n        } else {\r\n            return solutionCodeBlock()\r\n        }\r\n    }\r\n\r\n    const lockIcon = () => {\r\n        if(isLocked) {\r\n            return (\r\n                <div className='right-tools'>\r\n                    <span className='tool'>\r\n                        {props.price}\r\n                    </span>\r\n                    <FaLock className='tool' size='1.2em'/>                    \r\n                    <span> \r\n                        {showSolution ? <TiArrowSortedUp size='1.5em'/> : <TiArrowSortedDown size='1.5em'/>}\r\n                    </span>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <FaLockOpen className='tool' size='1.2em'/>\r\n                    <span> \r\n                    {showSolution ? <TiArrowSortedUp size='1.5em'/> : <TiArrowSortedDown size='1.5em'/>}\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div \r\n        className={showSolution ? 'solution clicked' : 'solution'}>\r\n            <li>\r\n                <div className='solutionTitle' onClick={() => setShowSolution(!showSolution)}>\r\n                    <span>Solution {props.solutionIdx}</span>                    \r\n                    {lockIcon()}                    \r\n                </div>                \r\n                <span className='code'>\r\n                    {showSolution ? solutionByMode() : null}                    \r\n                </span>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Solution","import React, { useEffect, useState } from 'react';\r\nimport Hint from './Hint';\r\nimport Solution from './Solution';\r\nimport '../../sass/Components/Quiz/Question.scss'\r\nimport { BiBrain } from 'react-icons/bi';\r\nimport { FaCircle, FaStar, FaRegStar, FaCoins } from 'react-icons/fa';\r\nimport { FiCircle } from 'react-icons/fi';\r\n\r\nconst MODE_QUESTION = 1;\r\nconst MODE_SOLUTIONS = 2;\r\n\r\n\r\nconst Question = (props) => {\r\n    const { question } = props;\r\n    const [isStared, setIsStared] = useState(false);\r\n    const [isCompleted, setIsCompleted] = useState(false);\r\n    const [mode, setMode] = useState(MODE_QUESTION);\r\n    const [exp, setEXP] = useState(question.maxEXP);    \r\n    const [solutionLockList, setSolutionLockList] = useState({})\r\n\r\n    useEffect(() => {\r\n        initSolutionLockList();        \r\n    }, [])\r\n\r\n    const initSolutionLockList = () => {             \r\n        let initSolutionLockList = {};        \r\n        question.solutions.forEach((solution) => {                        \r\n            initSolutionLockList[solution._id] = true;            \r\n        })                \r\n        setSolutionLockList(initSolutionLockList);\r\n    }\r\n\r\n    const handleUnlockClick = (id, price) => {              \r\n        if(solutionLockList[id]){            \r\n            let newsolutionLockList = solutionLockList;        \r\n            newsolutionLockList[id] = false;    \r\n            setSolutionLockList(newsolutionLockList)\r\n            setEXP(exp - price);\r\n        }\r\n    }\r\n\r\n    const handleRunClick = () => {\r\n        let newsolutionLockList = solutionLockList;\r\n        Object.keys(newsolutionLockList).forEach((key) => newsolutionLockList[key] = false);\r\n        setSolutionLockList(newsolutionLockList);\r\n    }\r\n\r\n    const renderDifficulty = () => {\r\n        return (\r\n            <div>\r\n                {[...Array(question.difficulty)].map((elm,idx) => {\r\n                    return (\r\n                        <BiBrain \r\n                        key={question.id + 'brain' + idx}\r\n                        size='1.2em'\r\n                        style={{margin: '0 2px 0 2px', color:'pink'}}/>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderHints = () => {        \r\n        return (\r\n            <ul>\r\n            {question.hints.map((hint, hintIdx) => {\r\n                const hintText = hint.text;\r\n                if(hintIdx === question.hints.length - 1){\r\n                    return (\r\n                        <Hint \r\n                        key={question.id + 'hint' + hintIdx}\r\n                        hintText={hintText}\r\n                        hintName={\"Optimal Time & Space Complexity\"}/>                        \r\n                    )\r\n                }\r\n                return (\r\n                    <Hint \r\n                    key={question.id + 'hint' + hintIdx}\r\n                    hintText={hintText}\r\n                    hintName={\"Hint \" +  (1 + hintIdx).toString()}/>\r\n                )\r\n            })}\r\n        </ul>\r\n        )\r\n    }\r\n\r\n    const renderSolutions = () => {   \r\n        return (\r\n            <div className='solutions'>\r\n                <div className='hacking-exp'>\r\n                    <span>Hacking Experience: </span>\r\n                    <span>{exp} <FaCoins style={{color:'#ffba08'}}/></span>\r\n                </div>\r\n                <ul>\r\n                {question.solutions.map((solution, solutionIdx) => {                    \r\n                    let id = solution._id;\r\n                    let isLocked = solutionLockList[id];\r\n\r\n                    return (\r\n                        <Solution \r\n                        key={id}\r\n                        id={id}\r\n                        isLocked={isLocked}\r\n                        solutionText={solution.text}\r\n                        solutionIdx={1 + solutionIdx}\r\n                        price={solution.price}\r\n                        handleUnlockClick={handleUnlockClick}/>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    const renderQuestion = () => {\r\n        return (\r\n            <div className='question'>\r\n                <div className='meta-data'>\r\n                    <div className='difficulty full-stats'>\r\n                        <span className='stats'>Difficulty </span>\r\n                        {renderDifficulty()}\r\n                    </div>\r\n                    <div className='category full-stats'>\r\n                        <span className='stats'>Category </span>\r\n                        <span>{question.category}</span>\r\n                    </div>\r\n                    <div className='exp full-stats'>\r\n                        <span className='stats'>Credits </span>\r\n                        <span style={{whiteSpace:'nowrap'}}>{question.maxEXP} <FaCoins style={{color:'#ffba08'}}/></span>\r\n                    </div>\r\n                    <div className='submissions full-stats'>\r\n                        <span className='stats'>Submissions </span>\r\n                        <span>{question.successfulSubmission}+</span>\r\n                    </div>\r\n                </div>\r\n                <div className='description'>\r\n                    <div className='header'>\r\n                        <span className='title'>{question.title}</span> \r\n                        <span className='isCompleted'\r\n                        onClick={() => {\r\n                            setIsCompleted(!isCompleted);\r\n                            handleRunClick();\r\n                        }}>                         \r\n                            {isCompleted ? <FaCircle size='1.3em'/> : <FiCircle size='2.5rem'/>}\r\n                        </span>\r\n                        <span onClick={() => setIsStared(!isStared)} className='iStared'>\r\n                             {isStared ? <FaStar size='1.3em' /> : <FaRegStar size='2.5rem' />}\r\n                        </span>\r\n                    </div>\r\n                    <div className='text'>\r\n                        <p>\r\n                            {question.description}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className='IO'>\r\n                    <div className='input'>\r\n                        <span className='title'>Sample Input</span>\r\n                        <div className='code'>                        \r\n                            {question.inputCode}                        \r\n                        </div>\r\n                    </div>\r\n                    <div className='output'>\r\n                        <span className='title'>Sample Output</span>\r\n                        <div className='code'>                            \r\n                            {question.outputCode}                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='hints'>\r\n                    <span className='title'>Hints</span>\r\n                    <div className='list'>\r\n                        {question.hints ? renderHints() : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderFeature = () => {\r\n        if(mode === MODE_QUESTION){\r\n            return renderQuestion()\r\n        } else if(mode === MODE_SOLUTIONS){\r\n            return renderSolutions()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='question-editor'>\r\n            <div className='feature'>                \r\n                <span className={mode === MODE_QUESTION ? 'option clicked' : 'option'}\r\n                    onClick={() => setMode(MODE_QUESTION)}\r\n                    >Question</span>\r\n                <span className={mode === MODE_SOLUTIONS ? 'option clicked' : 'option'}\r\n                    onClick={() => setMode(MODE_SOLUTIONS)}\r\n                    >Our Solutions</span>\r\n            </div>\r\n            {renderFeature()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;","import React, { useState } from 'react';\r\nimport '../../sass/Components/Quiz/CodeEditorHeader.scss'\r\nimport { FaPlay, FaUndo } from \"react-icons/fa\";\r\n\r\nconst CodeEditorHeader = (props) => {\r\n    const [version, setVersion] = useState(1);\r\n    const [showUndo, setShowUndo] = useState(false);\r\n\r\n    return (\r\n        <div className='code-editor-header'>\r\n            <div>                 \r\n                <span className={version === 1 ? 'soultion-version clicked' : 'soultion-version'}\r\n                    onClick={() => {\r\n                        setVersion(1);\r\n                        props.handleVersionClick(1)}\r\n                    }>\r\n                    version 1</span>\r\n                <span className={version === 2 ? 'soultion-version clicked' : 'soultion-version'}\r\n                    onClick={() => {\r\n                        setVersion(2);\r\n                        props.handleVersionClick(2)}\r\n                    }>\r\n                    version 2</span>\r\n                <span className={version === 3 ? 'soultion-version clicked' : 'soultion-version'}\r\n                    onClick={() => {\r\n                        setVersion(3);\r\n                        props.handleVersionClick(3)}\r\n                    }>\r\n                    version 3</span>\r\n            </div>\r\n            <div className='undo-play'>\r\n                {showUndo ?\r\n                <div className='pop-up'>\r\n                    <span>Restore?</span>\r\n                    <span \r\n                    className='undo-option'\r\n                    onClick={() => props.handleResetClick()}\r\n                    >\r\n                        Yes\r\n                    </span>\r\n                    <span \r\n                    className='undo-option'\r\n                    onClick={() => setShowUndo(false)}>\r\n                         No\r\n                    </span>\r\n                </div>\r\n                : null }                \r\n                <FaUndo onClick={() => setShowUndo(!showUndo)} className='play'/>\r\n                <FaPlay onClick={() => props.handleRunClick()} className='reset'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CodeEditorHeader;","import React, { useState } from 'react'\r\nimport '../../sass/Components/Quiz/Tester.scss'\r\nimport Test from './Test'\r\nimport { FiCheckCircle, FiX } from 'react-icons/fi';\r\n\r\nconst Tester = (props) => {\r\n    const [gotError, setGotError] = useState(false)\r\n\r\n    const renderTests = () => {\r\n        return (\r\n            <div className='TestWrapper'>\r\n                {props.question.tests.map((test, index) => {\r\n                    return (\r\n                        <Test\r\n                            key={`test${index}`}\r\n                            userInput={props.userInput}\r\n                            test={test}\r\n                            testNumber={index + 1}\r\n                            setGotError={setGotError}\r\n                            />\r\n                    )\r\n                })}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n    const renderError = () => {        \r\n        return (\r\n            <div className='Error'>\r\n                <FiX \r\n                    className='WrongIcon'\r\n                    size={`4rem`} />\r\n                Opps! Your Code Failed to Compile...\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='Tester'>\r\n            {gotError ? renderError() : renderTests()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tester","import React, { useState, useRef, useEffect } from 'react';\r\nimport '../../sass/Components/Quiz/CodeEditor.scss'\r\nimport CodeEditorHeader from './CodeEditorHeader'; \r\n\r\nimport \"ace-builds\";\r\nimport \"ace-builds/webpack-resolver\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-twilight\";\r\n\r\nimport Tester from './Tester'\r\n\r\n\r\nconst CodeEditor = (props) => {\r\n    const { question } = props;\r\n    const [version, setVersion] = useState(1);     \r\n    const [version1Code, setVersion1Code] = useState(\"\");\r\n    const [version2Code, setVersion2Code] = useState(\"\");\r\n    const [version3Code, setVersion3Code] = useState(\"\");\r\n    const [isEvaluating, setIsEvaluating] = useState(false);\r\n    const [userInput, setUserInput] = useState(null)\r\n    \r\n    const aceEditorRef = useRef(null);\r\n\r\n    const handleRunClick = () => {               \r\n        if(version === 1){                         \r\n            setUserInput(version1Code)  \r\n        }else if(version === 2){\r\n            setUserInput(version2Code)                      \r\n        }else if(version === 3){\r\n            setUserInput(version3Code)\r\n        }  \r\n        setIsEvaluating(true)\r\n    }\r\n\r\n    const handleVersionClick = (number) => {\r\n        setVersion(number);\r\n    }\r\n\r\n    useEffect( () => {        \r\n        handleResetClick()\r\n    }, [question])\r\n\r\n    const handleResetClick = () => {                \r\n        if(version === 1){\r\n            setVersion1Code(\"\");                       \r\n        }else if(version === 2){\r\n            setVersion2Code(\"\");\r\n        }else if(version === 3){\r\n            setVersion3Code(\"\");\r\n        }        \r\n\r\n        aceEditorRef.current.editor.setValue(question.solutionDefault);\r\n    }\r\n\r\n    const onChange = (newValue) => {          \r\n        if(version === 1){\r\n            setVersion1Code(newValue);\r\n        } else if(version === 2){\r\n            setVersion2Code(newValue);\r\n        } else if(version === 3){\r\n            setVersion3Code(newValue);\r\n        }       \r\n        setIsEvaluating(false)  \r\n      }\r\n\r\n    const renderEditor = () => {        \r\n        let editorInitText = question.solutionDefault;\r\n\r\n        if(version === 1 && version1Code){\r\n            editorInitText = version1Code\r\n        }else if(version === 2 && version2Code){\r\n            editorInitText = version2Code\r\n        }else if(version === 3 && version3Code){\r\n            editorInitText = version3Code\r\n        }\r\n\r\n        return (\r\n            <AceEditor\r\n            className='ace-editor'\r\n            ref={aceEditorRef}\r\n            value={editorInitText}\r\n            mode=\"javascript\"\r\n            theme=\"twilight\"\r\n            onChange={onChange}\r\n            name=\"123-123-123\"\r\n            editorProps={{ $blockScrolling: true }}\r\n            fontSize='16px'\r\n            width='100%'\r\n            height='95%'\r\n            showPrintMargin={true}\r\n            showGutter={true}\r\n            highlightActiveLine={true}\r\n            setOptions={{\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: false,\r\n                showLineNumbers: true,\r\n                tabSize: 2,\r\n                }}\r\n          />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='EditorWrapper'>\r\n            <div className='code-editor'>                \r\n                <CodeEditorHeader \r\n                handleRunClick={handleRunClick}\r\n                handleVersionClick={handleVersionClick}\r\n                handleResetClick={handleResetClick}/>\r\n                {question && version === 1 && renderEditor()}\r\n                {question && version === 2 && renderEditor()}\r\n                {question && version === 3 && renderEditor()}                \r\n            </div>\r\n            {question && isEvaluating && <Tester question={question} userInput={userInput}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CodeEditor;","import React, { useState, useEffect } from 'react'\r\nimport '../../sass/Components/Quiz/QuestionSideBarItem.scss'\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nconst QuestionSideBarItem = (props) => {\r\n    const [isActive, setIsActive] = useState(false)\r\n    let url = useLocation();\r\n\r\n    useEffect( () => {        \r\n        `/Quiz/${props.link}` === url.pathname ? setIsActive(true) : setIsActive(false)\r\n        \r\n    }, [url, props.link])\r\n    return (     \r\n        <Link\r\n            style={{ textDecoration: 'none' }}\r\n            className={isActive ? 'QuestionButton ActiveQuestion' : 'QuestionButton'}\r\n            to={{\r\n            pathname: `/Quiz/${props.link}`,            \r\n                }}>   \r\n            <div className='name'>\r\n                {props.title}                \r\n            </div>    \r\n        </Link>   \r\n    )\r\n}\r\n\r\nexport default QuestionSideBarItem","\r\n\r\nexport const db = [\r\n    {\r\n        id:0,\r\n        difficulty:1,\r\n        category:'Sorting',\r\n        successfulSubmission: 1235,\r\n        title:'Bubble Sort',\r\n        description:'Bubble sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \"bubble\" to the top of the list. Implement the algorithm to sort any given array.',\r\n        hints:[{text:'Use two iterations, either for or while'}, {text:'Time: O(n^2) Space:O(1)'}],\r\n        solutions:[{text:'sol 1', price:120, _id:0}, {text:'sol 2', price:120, _id:1}], \r\n        inputCode:'[5, 3, 1, 2, 4]',\r\n        outputCode:'[1, 2, 3, 4, 5]',\r\n        solutionDefault:'const bubbleSort = (array) => { \\n \\treturn [] \\n }',\r\n        maxEXP:1000,\r\n        link: 'BubbleSort',\r\n        tests: [{input:`\\n bubbleSort([1,4,5,2,3])`, output:[1,2,3,4,5]}, {input:`\\n bubbleSort([3,2,3,1])`, output:[1,2,3,3]}, {input:`\\n bubbleSort([3,2,1])`, output:[1,2,3]}, {input:`\\n bubbleSort([1])`, output:[1]}, {input:`\\n bubbleSort([4,3,2,1])`, output:[1,2,3,4]}, {input:`\\n bubbleSort([1,2,3,4,5,1,2,3,4,5])`, output:[1,1,2,2,3,3,4,4,5,5]}]\r\n    }, \r\n    {\r\n        id:1,\r\n        difficulty:2,\r\n        category:'Sorting',\r\n        successfulSubmission:32454,\r\n        title:'Merge Sort',\r\n        description:'In computer science, merge sort (also commonly spelled as mergesort) is an efficient, general-purpose, and comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945.[2] A detailed description and analysis of bottom-up merge sort appeared in a report by Goldstine and von Neumann as early as 1948. Implement the algorithm to sort any given array.',\r\n        hints:[{text:'Recursion can be effective in this algorithm.'}, {text:'Time: O(nlog(n)) Space:O(n)'}],\r\n        solutions:[{text:'sol 1', price:120, _id:0}, {text:'sol 2', price:120, _id:1}], \r\n        inputCode:'[5, 3, 1, 2, 4]',\r\n        outputCode:'[1, 2, 3, 4, 5]',\r\n        solutionDefault:'const mergeSort = (array) => { \\n \\treturn [] \\n }',\r\n        maxEXP:1000,\r\n        link: 'MergeSort',\r\n        tests: [{input:`\\n mergeSort([1,4,5,2,3])`, output:[1,2,3,4,5]}, {input:`\\n mergeSort([3,2,3,1])`, output:[1,2,3,3]}, {input:`\\n mergeSort([3,2,1])`, output:[1,2,3]}, {input:`\\n mergeSort([1])`, output:[1]}, {input:`\\n mergeSort([4,3,2,1])`, output:[1,2,3,4]}, {input:`\\n mergeSort([1,2,3,4,5,1,2,3,4,5])`, output:[1,1,2,2,3,3,4,4,5,5]}]\r\n    },\r\n    {\r\n        id:2,\r\n        difficulty:3,\r\n        category:'Sorting',\r\n        successfulSubmission:1235,\r\n        title:'Quick Sort',\r\n        description:'Quicksort is a divide-and-conquer algorithm. It works by selecting a pivot element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.[4] The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting. Implement the algorithm to sort any given array.',\r\n        hints:[{text:'Rotate the elements around the pivot, and continue for the left and right parts'}, {text:'Time: O(nlog(n)) Space:O(n)'}],\r\n        solutions:[{text:'sol 1', price:120, _id:0}, {text:'sol 2', price:120, _id:1}], \r\n        inputCode:'function bubbleSort(array) ...',\r\n        inputCode:'[5, 3, 1, 2, 4]',\r\n        outputCode:'[1, 2, 3, 4, 5]',\r\n        solutionDefault:'const quickSort = (array) => { \\n \\treturn [] \\n }',\r\n        maxEXP:1000,\r\n        link:\"QuickSort\",\r\n        tests: [{input:`\\n quickSort([1,4,5,2,3])`, output:[1,2,3,4,5]}, {input:`\\n quickSort([3,2,3,1])`, output:[1,2,3,3]}, {input:`\\n quickSort([3,2,1])`, output:[1,2,3]}, {input:`\\n quickSort([1])`, output:[1]}, {input:`\\n quickSort([4,3,2,1])`, output:[1,2,3,4]}, {input:`\\n quickSort([1,2,3,4,5,1,2,3,4,5])`, output:[1,1,2,2,3,3,4,4,5,5]}]\r\n    }, \r\n    {\r\n        id:3,\r\n        difficulty:3,\r\n        category:'Algorithms',\r\n        successfulSubmission:524,\r\n        title:'DFS',\r\n        description:'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking. Implement the algorithm to search and store any element in the graph.',\r\n        hints:[{text:'Recursion can be effective in this algorithm.'}, {text:'Time: O(n) Space:O(n)'}],\r\n        solutions:[{text:'sol 1', price:120, _id:0}, {text:'sol 2', price:120, _id:1}], \r\n        inputCode:'Graph: A \\n \\t   /  \\\\ \\n \\t B   C \\n        /  \\t  \\n     D',\r\n        outputCode:\"['A', 'B', 'D', 'C']\",\r\n        solutionDefault:'const DFS = (graph) => { \\n \\treturn [] \\n }',\r\n        maxEXP:4000,\r\n        link:\"DFS\",\r\n        tests:[]        \r\n    },\r\n    {\r\n        id:4,\r\n        difficulty:3,\r\n        category:'Algorithms',\r\n        successfulSubmission:145,\r\n        title:'BFS',\r\n        description:'Breadth-first search (BFS) is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. Extra memory, usually a queue, is needed to keep track of the child nodes that were encountered but not yet explored. Implement the algorithm to search and store any element in the graph.',\r\n        hints:[{text:'An iterative approach can be effective in this algorithm.'}, {text:'Time: O(n) Space:O(n)'}],\r\n        solutions:[{text:'sol 1', price:120, _id:0}, {text:'sol 2', price:120, _id:1}], \r\n        inputCode:'function bubbleSort(array) ...',\r\n        inputCode:'Graph: A \\n \\t   /  \\\\ \\n \\t B   C \\n        /  \\t  \\n     D',\r\n        outputCode:\"['A', 'B', 'C', 'D']\",\r\n        solutionDefault:'const BFS = (graph) => { \\n \\treturn [] \\n }',\r\n        maxEXP:4000,\r\n        link:\"BFS\",\r\n        tests:[]\r\n    },\r\n]","import React, { useEffect, useState } from 'react'\r\nimport '../../sass/Components/Quiz/Quizer.scss'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport Question from './Question'\r\nimport CodeEditor from './CodeEditor'\r\nimport QuestionSideBarItem from './QuestionSideBarItem'\r\n\r\nimport { db } from './QuizData'\r\n\r\n\r\nconst Quizer = () => {        \r\n    const [activeQuestion, setActiveQuestion] = useState(null)\r\n    const [questionsList, setQuestionList] = useState([]);\r\n    let url = useLocation();\r\n\r\n    const getQuestionsList = async () => {          \r\n        let newQuestionList = db;    \r\n        setQuestionList(newQuestionList);\r\n    }\r\n\r\n    useEffect( () => {        \r\n        getQuestionsList()\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        \r\n        let urlActiveQuestion = url.pathname.split('/')[url.pathname.split('/').length - 1]        \r\n        let newactiveQuestion = questionsList.find(q => q.link === urlActiveQuestion)\r\n        setActiveQuestion(newactiveQuestion)\r\n    }, [url, questionsList]) \r\n\r\n    const renderSideBar = () => {  \r\n        return (\r\n            db.map( (q, idx) => {                \r\n                return (\r\n                    <QuestionSideBarItem\r\n                        idx={idx}\r\n                        key={idx}\r\n                        title={q.title} \r\n                        link={q.link}\r\n                        />\r\n                )\r\n            })\r\n        )      \r\n    }\r\n\r\n    return (\r\n        <div className='Quizer'>\r\n            <div className='QuizSideBar'>\r\n                <div className='QuistionsWrapper'>\r\n                    {renderSideBar()}\r\n                </div>\r\n            </div>\r\n\r\n            <div className='Editor'>\r\n                {activeQuestion && <Question question={activeQuestion}/>}                  \r\n                {activeQuestion && <CodeEditor question={activeQuestion}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quizer","import React from 'react'\r\nimport '../sass/Components/HomePage.scss'\r\n\r\n\r\nimport { GiCyberEye } from \"react-icons/gi\";\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className='HomePage'>\r\n            <div className='TitleWraper'>\r\n                <GiCyberEye \r\n                    size={`25rem`}\r\n                    className='icon'/>  \r\n                <div className='Text'>\r\n                    {`Welcome \\n to AlgoSight`}\r\n                </div>  \r\n            </div>  \r\n            <div className='TagText'>\r\n                Your CS Guide</div>                    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport '../sass/Components/Console.scss'\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport TopBar from './TopBar'\r\nimport Sorter from './Sorting/Sorter'\r\nimport Finder from './PathFinding/Finder';\r\nimport Quizer from './Quiz/Quizer';\r\nimport HomePage from './HomePage';\r\n\r\nconst Console = () => {\r\n    return (\r\n        <div className='Console'>\r\n            <TopBar />\r\n            <Switch>\r\n                <Route path='/Sorting' exact component={Sorter} /> \r\n                <Route path='/PathFinding' exact component={Finder} />\r\n                <Route path='/Quiz' component={Quizer}/>\r\n                <Route path='/' exact component={HomePage}/>\r\n                <Route path='/VisualizeCS' exact component={HomePage}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Console","import React, { useState } from 'react'\nimport './sass/Components/App.scss'\n\nimport Console from './Components/Console'\n\nconst App = () => {  \n  return (\n    <div className='App'>   \n      <Console />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}